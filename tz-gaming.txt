{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aecff19f",
   "metadata": {},
   "source": [
    "# TZ Gaming: Optimal Targeting of Mobile Ads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4dd2ad5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pyrsm as rsm\n",
    "import seaborn as sns\n",
    "\n",
    "# increase plot resolution\n",
    "# mpl.rcParams[\"figure.dpi\"] = 200"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f6496814",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.9.13'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check that you have version 0.9.13 of the pyrsm package\n",
    "# install in a terminal using: pip install --user \"pyrsm>=0.9.13\"\n",
    "rsm.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b7b8bc29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>ctrua</th>\n",
       "      <th>imput</th>\n",
       "      <th>clut</th>\n",
       "      <th>ctrut</th>\n",
       "      <th>imppat</th>\n",
       "      <th>clpat</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train</td>\n",
       "      <td>I7</td>\n",
       "      <td>no</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>app8</td>\n",
       "      <td>ios</td>\n",
       "      <td>439</td>\n",
       "      <td>2</td>\n",
       "      <td>0.455581</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>1.408451</td>\n",
       "      <td>-1.207066</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id247135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train</td>\n",
       "      <td>I23</td>\n",
       "      <td>no</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>67312</td>\n",
       "      <td>1069</td>\n",
       "      <td>1.588127</td>\n",
       "      <td>0.277429</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id245079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train</td>\n",
       "      <td>I28</td>\n",
       "      <td>no</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>app5</td>\n",
       "      <td>ios</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>6.578947</td>\n",
       "      <td>94</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>331</td>\n",
       "      <td>1</td>\n",
       "      <td>0.302115</td>\n",
       "      <td>1.084441</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id927245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train</td>\n",
       "      <td>I30</td>\n",
       "      <td>no</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71114</td>\n",
       "      <td>1001</td>\n",
       "      <td>1.407599</td>\n",
       "      <td>-2.345698</td>\n",
       "      <td>0.018965</td>\n",
       "      <td>id922188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train</td>\n",
       "      <td>I35</td>\n",
       "      <td>no</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>3834</td>\n",
       "      <td>29</td>\n",
       "      <td>0.756390</td>\n",
       "      <td>...</td>\n",
       "      <td>0.689655</td>\n",
       "      <td>329</td>\n",
       "      <td>4</td>\n",
       "      <td>1.215805</td>\n",
       "      <td>183852</td>\n",
       "      <td>2317</td>\n",
       "      <td>1.260253</td>\n",
       "      <td>0.429125</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id355833</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  training inum click  time time_fct   app mobile_os  impup  clup     ctrup  \\\n",
       "0    train   I7    no     9        9  app8       ios    439     2  0.455581   \n",
       "1    train  I23    no    15       15  app1       ios     64     0  0.000000   \n",
       "2    train  I28    no    12       12  app5       ios     80     0  0.000000   \n",
       "3    train  I30    no    19       19  app1       ios     25     0  0.000000   \n",
       "4    train  I35    no    24       24  app1   android   3834    29  0.756390   \n",
       "\n",
       "   ...     ctrua  imput  clut     ctrut  imppat  clpat    ctrpat       rnd  \\\n",
       "0  ...  0.000000     25     0  0.000000      71      1  1.408451 -1.207066   \n",
       "1  ...  0.000000      7     0  0.000000   67312   1069  1.588127  0.277429   \n",
       "2  ...  6.578947     94     0  0.000000     331      1  0.302115  1.084441   \n",
       "3  ...  0.000000     19     0  0.000000   71114   1001  1.407599 -2.345698   \n",
       "4  ...  0.689655    329     4  1.215805  183852   2317  1.260253  0.429125   \n",
       "\n",
       "   pred_vneta        id  \n",
       "0    0.003961  id247135  \n",
       "1    0.003961  id245079  \n",
       "2    0.003961  id927245  \n",
       "3    0.018965  id922188  \n",
       "4    0.003961  id355833  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# loading data tz_gaming.parquet\n",
    "tz_gaming = pd.read_parquet(\"data/tz_gaming.parquet\")\n",
    "tz_gaming.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb5253a",
   "metadata": {},
   "source": [
    "> Note: Review the data description carefully and watch the \"Video: TZ gaming preview (12 min)\" linked on Canvas"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffc3eefb",
   "metadata": {},
   "source": [
    "> Note: Full question details are contained in the tz-gaming-msba.pdf file\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "af1428da",
   "metadata": {},
   "source": [
    "## Part I: Logistic regression (10 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "361b6ecd",
   "metadata": {},
   "source": [
    "a. Estimate a logistic regression model with the following variables `time_fct app mobile_os impua clua ctrua` as the explanatory variables (features) and `click` as the response variable (target)\n",
    "\n",
    "> Note: Use only the rows that are labeled `train` in the `training` variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f6b92e7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "87535"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tz_train = tz_gaming[tz_gaming[\"training\"] == 'train']\n",
    "\n",
    "len(tz_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a09ac84c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : tz_train\n",
      "Response variable    : click\n",
      "Level                : yes\n",
      "Explanatory variables: time_fct, app, mobile_os, impua, clua, ctrua\n",
      "Null hyp.: There is no effect of x on click\n",
      "Alt. hyp.: There is an effect of x on click\n",
      "\n",
      "                     OR      OR%  coefficient   std.error  z.value p.value     \n",
      "Intercept         0.029   -97.1%        -3.53       0.197  -17.936  < .001  ***\n",
      "time_fct[2]       0.622   -37.8%        -0.47       0.321   -1.478   0.139     \n",
      "time_fct[3]       0.718   -28.2%        -0.33       0.454   -0.730   0.466     \n",
      "time_fct[4]       0.000  -100.0%       -23.54   42007.161   -0.001     1.0     \n",
      "time_fct[5]       0.000  -100.0%       -23.72   55229.970   -0.000     1.0     \n",
      "time_fct[6]       0.349   -65.1%        -1.05       1.021   -1.030   0.303     \n",
      "time_fct[7]       1.221    22.1%         0.20       0.426    0.468    0.64     \n",
      "time_fct[8]       1.104    10.4%         0.10       0.296    0.335   0.737     \n",
      "time_fct[9]       1.029     2.9%         0.03       0.287    0.101    0.92     \n",
      "time_fct[10]      0.830   -17.0%        -0.19       0.295   -0.633   0.527     \n",
      "time_fct[11]      0.637   -36.3%        -0.45       0.276   -1.635   0.102     \n",
      "time_fct[12]      0.874   -12.6%        -0.14       0.280   -0.483   0.629     \n",
      "time_fct[13]      0.590   -41.0%        -0.53       0.290   -1.823   0.068    .\n",
      "time_fct[14]      1.099     9.9%         0.09       0.225    0.419   0.675     \n",
      "time_fct[15]      0.986    -1.4%        -0.01       0.225   -0.062   0.951     \n",
      "time_fct[16]      1.046     4.6%         0.05       0.233    0.195   0.846     \n",
      "time_fct[17]      1.014     1.4%         0.01       0.250    0.055   0.956     \n",
      "time_fct[18]      1.061     6.1%         0.06       0.247    0.241   0.809     \n",
      "time_fct[19]      1.284    28.4%         0.25       0.233    1.072   0.284     \n",
      "time_fct[20]      1.224    22.4%         0.20       0.231    0.873   0.382     \n",
      "time_fct[21]      0.867   -13.3%        -0.14       0.244   -0.584   0.559     \n",
      "time_fct[22]      0.970    -3.0%        -0.03       0.238   -0.127   0.899     \n",
      "time_fct[23]      1.044     4.4%         0.04       0.238    0.180   0.857     \n",
      "time_fct[24]      1.099     9.9%         0.09       0.229    0.410   0.682     \n",
      "app[app2]         0.124   -87.6%        -2.09       0.229   -9.127  < .001  ***\n",
      "app[app3]         0.184   -81.6%        -1.69       1.003   -1.689   0.091    .\n",
      "app[app4]         0.383   -61.7%        -0.96       0.321   -2.988   0.003   **\n",
      "app[app5]         0.282   -71.8%        -1.26       1.005   -1.258   0.208     \n",
      "app[app6]         0.651   -34.9%        -0.43       0.175   -2.457   0.014    *\n",
      "app[app7]         0.596   -40.4%        -0.52       1.007   -0.513   0.608     \n",
      "app[app8]         0.000  -100.0%       -24.37   71686.172   -0.000     1.0     \n",
      "app[app9]         0.748   -25.2%        -0.29       0.236   -1.227    0.22     \n",
      "app[app10]        0.000  -100.0%       -23.89   67058.977   -0.000     1.0     \n",
      "app[app11]        1.051     5.1%         0.05       0.719    0.069   0.945     \n",
      "app[app12]        0.713   -28.7%        -0.34       0.224   -1.504   0.133     \n",
      "app[app13]        2.131   113.1%         0.76       0.204    3.709  < .001  ***\n",
      "app[app14]        0.218   -78.2%        -1.53       0.451   -3.384  < .001  ***\n",
      "app[app15]        0.462   -53.8%        -0.77       0.717   -1.077   0.281     \n",
      "app[app16]        0.251   -74.9%        -1.38       0.711   -1.945   0.052    .\n",
      "app[app17]        0.882   -11.8%        -0.13       0.724   -0.174   0.862     \n",
      "app[app18]        0.075   -92.5%        -2.59       1.002   -2.586    0.01   **\n",
      "app[app19]        0.000  -100.0%       -24.37   92379.731   -0.000     1.0     \n",
      "app[app20]        0.000  -100.0%       -24.21   71551.198   -0.000     1.0     \n",
      "app[app21]        0.337   -66.3%        -1.09       0.383   -2.839   0.005   **\n",
      "app[app22]        0.321   -67.9%        -1.14       1.005   -1.130   0.258     \n",
      "app[app23]        3.111   211.1%         1.13       0.392    2.898   0.004   **\n",
      "app[app24]        1.590    59.0%         0.46       0.273    1.701   0.089    .\n",
      "app[app25]        0.975    -2.5%        -0.03       0.594   -0.042   0.966     \n",
      "app[app26]        0.000  -100.0%       -24.47   62613.516   -0.000     1.0     \n",
      "app[app27]        0.202   -79.8%        -1.60       0.711   -2.253   0.024    *\n",
      "app[app28]        0.328   -67.2%        -1.11       0.581   -1.918   0.055    .\n",
      "app[app29]        2.634   163.4%         0.97       0.345    2.805   0.005   **\n",
      "app[app30]        0.000  -100.0%       -24.39   85789.970   -0.000     1.0     \n",
      "app[app31]        0.246   -75.4%        -1.40       0.710   -1.975   0.048    *\n",
      "app[app32]        0.000  -100.0%       -23.16   46670.216   -0.000     1.0     \n",
      "app[app33]        0.513   -48.7%        -0.67       0.338   -1.974   0.048    *\n",
      "app[app34]        0.000  -100.0%       -24.22   54802.115   -0.000     1.0     \n",
      "app[app35]        0.226   -77.4%        -1.49       1.004   -1.480   0.139     \n",
      "app[app36]        0.000  -100.0%       -24.12   76747.449   -0.000     1.0     \n",
      "app[app37]        0.434   -56.6%        -0.84       0.714   -1.171   0.242     \n",
      "app[app38]        0.000  -100.0%       -23.86   53394.100   -0.000     1.0     \n",
      "app[app39]        1.741    74.1%         0.55       0.419    1.322   0.186     \n",
      "app[app40]        1.005     0.5%         0.00       0.514    0.009   0.993     \n",
      "app[app41]        0.632   -36.8%        -0.46       0.714   -0.644   0.519     \n",
      "app[app42]        2.009   100.9%         0.70       0.369    1.889   0.059    .\n",
      "app[app43]        0.000  -100.0%       -24.47   75014.775   -0.000     1.0     \n",
      "app[app44]        0.000  -100.0%       -24.24   45702.677   -0.001     1.0     \n",
      "app[app45]        1.479    47.9%         0.39       0.588    0.665   0.506     \n",
      "app[app46]        0.296   -70.4%        -1.22       1.005   -1.210   0.226     \n",
      "app[app47]        0.289   -71.1%        -1.24       1.005   -1.235   0.217     \n",
      "app[app48]        0.000  -100.0%       -24.03  101834.366   -0.000     1.0     \n",
      "app[app49]        0.241   -75.9%        -1.42       1.004   -1.418   0.156     \n",
      "mobile_os[ios]    0.450   -55.0%        -0.80       0.076  -10.440  < .001  ***\n",
      "mobile_os[other]  0.719   -28.1%        -0.33       0.183   -1.801   0.072    .\n",
      "impua             0.979    -2.1%        -0.02       0.002  -11.386  < .001  ***\n",
      "clua              1.295    29.5%         0.26       0.058    4.452  < .001  ***\n",
      "ctrua             1.022     2.2%         0.02       0.002    9.058  < .001  ***\n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.109\n",
      "Pseudo R-squared (McFadden adjusted): 0.092\n",
      "Area under the RO Curve (AUC): 0.792\n",
      "Log-likelihood: -3946.072, AIC: 8046.145, BIC: 8768.389\n",
      "Chi-squared: 968.279, df(76), p.value < 0.001 \n",
      "Nr obs: 87,535\n"
     ]
    }
   ],
   "source": [
    "lr = rsm.model.logistic(\n",
    "    data = {'tz_train' : tz_train},\n",
    "    rvar = 'click', lev = 'yes',\n",
    "    evar = ['time_fct', 'app', 'mobile_os', 'impua', 'clua', 'ctrua']\n",
    ")\n",
    "\n",
    "lr.summary()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "3767d844",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "b. Summarize and interpret the logistic regression results. Which of these explanatory variables are statistically significant? Which variables seem to be most \"important\"? Make sure your model evaluation includes (1) an interpretation of the Permutation importance and Prediction plots for the explanatory variables `mobile_os`, `impua`, `clua`, and `ctrua` and (2) an evaluation of the model as a whole using Pseudo R-squared and the Chi-square test (5 points)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46d70d3c-a741-442c-9c19-ab7b2d4de96b",
   "metadata": {},
   "source": [
    "#### app[app2], app[app4], app[app6], app[app16], app[app18],app[app21], app[app23], app[app27], app[app29], app[app31], app[app33], app[app13], app[app14], mobile_os[ios] , impua, clua, ctrua are statistically significant."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32e0e69d",
   "metadata": {},
   "source": [
    "#### Intercept: The coefficient of the intercept is -3.53, with a very low p-value (<.001), indicating it is statistically significant. The negative coefficient suggests a low baseline probability of a click when all other variables are at zero.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cbd8e803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Pseudo R-squared (McFadden): 0.109\n",
      "Pseudo R-squared (McFadden adjusted): 0.092\n",
      "Area under the RO Curve (AUC): 0.792\n",
      "Log-likelihood: -3946.072, AIC: 8046.145, BIC: 8768.389\n",
      "Chi-squared: 968.279, df(76), p.value < 0.001 \n",
      "Nr obs: 87,535\n"
     ]
    }
   ],
   "source": [
    "##evaluate model fit\n",
    "lr.summary(main = False, fit = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cbe357e",
   "metadata": {},
   "source": [
    "#### The test of Preudo R-squared is to evaluate the goodness of fit of the logistic regression model. It is generally lower than the R-squared values seen in linear regression. A value of 0.109 indicates that the model has some improvement in explanatory power over a null model (a model with no predictors). \n",
    "\n",
    "#### The test of Pseudo R-squared (McFadden adjusted) is an adjusted version of McFadden's R-squared that accounts for the number of explanatory variables in the model. The value of 0.092 is slightly lower than the unadjusted R-squared, this suggests that the model may include some variables that are not absolutely necessary. These variables have improved the model's fit to some extent, but do not show a corresponding increase in predictive ability after adjusting for complexity.\n",
    "\n",
    "#### The Area under to RO curve is 0.792, which is a good value. It indicates that the model has a good ability to distinguish between the two classes. 0.5 is the lowest possible value, which indicates that the model is no better than random guessing. 1.0 is the highest possible value, which indicates that the model is perfect at distinguishing between the two classes.\n",
    "\n",
    "#### The Chi-square test is the difference between the model and the baseline model, The higher Chi-square indicating that the set of explanatory variables in the model is more effective in predicting the response variable. \n",
    "\n",
    "#### p-value (<0.001): This very small p-value indicates that the set of explanatory variables in the model is statistically significantly associated with the response variable. In other words, this means that we can reject the null hypothesis (i.e., the explanatory variables are not related to the response variable) with high confidence.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0cfc4b7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# discuss and add code to calculate additional statistics as needed\n",
    "## permutation importance and plots for explanatory variables\n",
    "lr.plot('vimp')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38c35b7c",
   "metadata": {},
   "source": [
    "#### The permutation importance plot is a measure of the importance of each explanatory variable in the model. The higher the value, the more important the explanatory variable is in predicting the response variable. The permutation importance plot shows that the importance of explanatory variables are: app > impua > mobile_os > clua > ctrua. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1203b6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1200 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr.plot(\"pred\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "83f2c3e9",
   "metadata": {
    "lines_to_next_cell": 2
   },
   "source": [
    "c. Predict the probability of a click (2 point)\n",
    "\n",
    "The estimated logistic regression model can predict the probability of a click. Create a new variable `pred_logit` with the predicted click-through probabilities linked to each impression. Make sure to generate predictions for all rows in the training and test data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "90e62409",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>imput</th>\n",
       "      <th>clut</th>\n",
       "      <th>ctrut</th>\n",
       "      <th>imppat</th>\n",
       "      <th>clpat</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "      <th>pred_logit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>115483</th>\n",
       "      <td>test</td>\n",
       "      <td>I399982</td>\n",
       "      <td>no</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>app2</td>\n",
       "      <td>ios</td>\n",
       "      <td>2110</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23216</td>\n",
       "      <td>19</td>\n",
       "      <td>0.081840</td>\n",
       "      <td>-1.852059</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id847352</td>\n",
       "      <td>0.001093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115484</th>\n",
       "      <td>test</td>\n",
       "      <td>I399986</td>\n",
       "      <td>no</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>app14</td>\n",
       "      <td>android</td>\n",
       "      <td>291</td>\n",
       "      <td>1</td>\n",
       "      <td>0.343643</td>\n",
       "      <td>...</td>\n",
       "      <td>74</td>\n",
       "      <td>1</td>\n",
       "      <td>1.351351</td>\n",
       "      <td>3665</td>\n",
       "      <td>14</td>\n",
       "      <td>0.381992</td>\n",
       "      <td>-0.296415</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id457437</td>\n",
       "      <td>0.003609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115485</th>\n",
       "      <td>test</td>\n",
       "      <td>I399991</td>\n",
       "      <td>no</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>364</td>\n",
       "      <td>3</td>\n",
       "      <td>0.824176</td>\n",
       "      <td>...</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>173353</td>\n",
       "      <td>2292</td>\n",
       "      <td>1.322158</td>\n",
       "      <td>0.099201</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id792352</td>\n",
       "      <td>0.020527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115486</th>\n",
       "      <td>test</td>\n",
       "      <td>I399992</td>\n",
       "      <td>no</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>app6</td>\n",
       "      <td>android</td>\n",
       "      <td>59</td>\n",
       "      <td>2</td>\n",
       "      <td>3.389831</td>\n",
       "      <td>...</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>2.702703</td>\n",
       "      <td>3474</td>\n",
       "      <td>53</td>\n",
       "      <td>1.525619</td>\n",
       "      <td>-0.186421</td>\n",
       "      <td>0.050679</td>\n",
       "      <td>id115678</td>\n",
       "      <td>0.021922</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115487</th>\n",
       "      <td>test</td>\n",
       "      <td>I399994</td>\n",
       "      <td>no</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>498</td>\n",
       "      <td>7</td>\n",
       "      <td>1.405622</td>\n",
       "      <td>...</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>1.886792</td>\n",
       "      <td>77884</td>\n",
       "      <td>1201</td>\n",
       "      <td>1.542037</td>\n",
       "      <td>0.857281</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id705546</td>\n",
       "      <td>0.011703</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       training     inum click  time time_fct    app mobile_os  impup  clup  \\\n",
       "115483     test  I399982    no    21       21   app2       ios   2110     0   \n",
       "115484     test  I399986    no    17       17  app14   android    291     1   \n",
       "115485     test  I399991    no    23       23   app1   android    364     3   \n",
       "115486     test  I399992    no    20       20   app6   android     59     2   \n",
       "115487     test  I399994    no    18       18   app1       ios    498     7   \n",
       "\n",
       "           ctrup  ...  imput  clut     ctrut  imppat  clpat    ctrpat  \\\n",
       "115483  0.000000  ...    158     0  0.000000   23216     19  0.081840   \n",
       "115484  0.343643  ...     74     1  1.351351    3665     14  0.381992   \n",
       "115485  0.824176  ...     19     0  0.000000  173353   2292  1.322158   \n",
       "115486  3.389831  ...     37     1  2.702703    3474     53  1.525619   \n",
       "115487  1.405622  ...     53     1  1.886792   77884   1201  1.542037   \n",
       "\n",
       "             rnd  pred_vneta        id  pred_logit  \n",
       "115483 -1.852059    0.003961  id847352    0.001093  \n",
       "115484 -0.296415    0.003961  id457437    0.003609  \n",
       "115485  0.099201    0.003961  id792352    0.020527  \n",
       "115486 -0.186421    0.050679  id115678    0.021922  \n",
       "115487  0.857281    0.003961  id705546    0.011703  \n",
       "\n",
       "[5 rows x 23 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tz_gaming[\"pred_logit\"] = lr.predict(tz_gaming).loc[:, 'prediction']\n",
    "\n",
    "tz_gaming.tail()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "2c2e222a",
   "metadata": {},
   "source": [
    "d. Estimate a logistic regression with `click` as the response variable and `rnd` as the **only** explanatory variable. As before, the model should be estimated on the training sample (i.e., \"training == 'train'\"). Create a new variable `pred_rnd` with the predicted click-through probabilities (1 point)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d48da4cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>clut</th>\n",
       "      <th>ctrut</th>\n",
       "      <th>imppat</th>\n",
       "      <th>clpat</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "      <th>pred_logit</th>\n",
       "      <th>pred_rnd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>115483</th>\n",
       "      <td>test</td>\n",
       "      <td>I399982</td>\n",
       "      <td>no</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>app2</td>\n",
       "      <td>ios</td>\n",
       "      <td>2110</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23216</td>\n",
       "      <td>19</td>\n",
       "      <td>0.081840</td>\n",
       "      <td>-1.852059</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id847352</td>\n",
       "      <td>0.001093</td>\n",
       "      <td>0.009435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115484</th>\n",
       "      <td>test</td>\n",
       "      <td>I399986</td>\n",
       "      <td>no</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>app14</td>\n",
       "      <td>android</td>\n",
       "      <td>291</td>\n",
       "      <td>1</td>\n",
       "      <td>0.343643</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.351351</td>\n",
       "      <td>3665</td>\n",
       "      <td>14</td>\n",
       "      <td>0.381992</td>\n",
       "      <td>-0.296415</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id457437</td>\n",
       "      <td>0.003609</td>\n",
       "      <td>0.008930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115485</th>\n",
       "      <td>test</td>\n",
       "      <td>I399991</td>\n",
       "      <td>no</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>364</td>\n",
       "      <td>3</td>\n",
       "      <td>0.824176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>173353</td>\n",
       "      <td>2292</td>\n",
       "      <td>1.322158</td>\n",
       "      <td>0.099201</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id792352</td>\n",
       "      <td>0.020527</td>\n",
       "      <td>0.008806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115486</th>\n",
       "      <td>test</td>\n",
       "      <td>I399992</td>\n",
       "      <td>no</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>app6</td>\n",
       "      <td>android</td>\n",
       "      <td>59</td>\n",
       "      <td>2</td>\n",
       "      <td>3.389831</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2.702703</td>\n",
       "      <td>3474</td>\n",
       "      <td>53</td>\n",
       "      <td>1.525619</td>\n",
       "      <td>-0.186421</td>\n",
       "      <td>0.050679</td>\n",
       "      <td>id115678</td>\n",
       "      <td>0.021922</td>\n",
       "      <td>0.008896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115487</th>\n",
       "      <td>test</td>\n",
       "      <td>I399994</td>\n",
       "      <td>no</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>498</td>\n",
       "      <td>7</td>\n",
       "      <td>1.405622</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.886792</td>\n",
       "      <td>77884</td>\n",
       "      <td>1201</td>\n",
       "      <td>1.542037</td>\n",
       "      <td>0.857281</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id705546</td>\n",
       "      <td>0.011703</td>\n",
       "      <td>0.008574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       training     inum click  time time_fct    app mobile_os  impup  clup  \\\n",
       "115483     test  I399982    no    21       21   app2       ios   2110     0   \n",
       "115484     test  I399986    no    17       17  app14   android    291     1   \n",
       "115485     test  I399991    no    23       23   app1   android    364     3   \n",
       "115486     test  I399992    no    20       20   app6   android     59     2   \n",
       "115487     test  I399994    no    18       18   app1       ios    498     7   \n",
       "\n",
       "           ctrup  ...  clut     ctrut  imppat  clpat    ctrpat       rnd  \\\n",
       "115483  0.000000  ...     0  0.000000   23216     19  0.081840 -1.852059   \n",
       "115484  0.343643  ...     1  1.351351    3665     14  0.381992 -0.296415   \n",
       "115485  0.824176  ...     0  0.000000  173353   2292  1.322158  0.099201   \n",
       "115486  3.389831  ...     1  2.702703    3474     53  1.525619 -0.186421   \n",
       "115487  1.405622  ...     1  1.886792   77884   1201  1.542037  0.857281   \n",
       "\n",
       "        pred_vneta        id  pred_logit  pred_rnd  \n",
       "115483    0.003961  id847352    0.001093  0.009435  \n",
       "115484    0.003961  id457437    0.003609  0.008930  \n",
       "115485    0.003961  id792352    0.020527  0.008806  \n",
       "115486    0.050679  id115678    0.021922  0.008896  \n",
       "115487    0.003961  id705546    0.011703  0.008574  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_rnd = rsm.model.logistic(\n",
    "    data = {'tz_training' : tz_train},\n",
    "    rvar = 'click', lev = 'yes',\n",
    "    evar = 'rnd'\n",
    ")\n",
    "tz_gaming[\"pred_rnd\"] = lr_rnd.predict(tz_gaming).loc[:, 'prediction']\n",
    "tz_gaming.tail()\n",
    "\n",
    "#lr_rnd.summary()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "b226af89",
   "metadata": {},
   "source": [
    "## Part II: Understanding Multicollinearity (10 points)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "4b48ceb8",
   "metadata": {},
   "source": [
    "a. Estimate a logistic regression model with `click` as the response variable and `imppat`, `clpat`, and `ctrpat` as the only explanatory variables. What is the interpretation of the Prediction plots for the explanatory variables? (2 points)\n",
    "\n",
    "> Note: Make sure to watch the \"Video: TZ gaming preview (12 min)\" on Canvas before answering this questions so you fully understand what the variables represent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4a936edd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : tz_training\n",
      "Response variable    : click\n",
      "Level                : yes\n",
      "Explanatory variables: imppat, clpat, ctrpat\n",
      "Null hyp.: There is no effect of x on click\n",
      "Alt. hyp.: There is an effect of x on click\n",
      "\n",
      "              OR     OR%  coefficient  std.error  z.value p.value     \n",
      "Intercept  0.004  -99.6%        -5.42      0.073  -74.156  < .001  ***\n",
      "imppat     1.000   -0.0%        -0.00      0.000   -4.802  < .001  ***\n",
      "clpat      1.002    0.2%         0.00      0.000    5.713  < .001  ***\n",
      "ctrpat     1.615   61.5%         0.48      0.034   13.933  < .001  ***\n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.035\n",
      "Pseudo R-squared (McFadden adjusted): 0.035\n",
      "Area under the RO Curve (AUC): 0.676\n",
      "Log-likelihood: -4273.088, AIC: 8554.176, BIC: 8591.695\n",
      "Chi-squared: 314.248, df(3), p.value < 0.001 \n",
      "Nr obs: 87,535\n",
      "\n",
      "Variance inflation factors:\n",
      "\n",
      "           vif    Rsq\n",
      "clpat   26.242  0.962\n",
      "imppat  23.467  0.957\n",
      "ctrpat   1.668  0.400\n"
     ]
    }
   ],
   "source": [
    "lr_mc1 = rsm.model.logistic(\n",
    "    data = {'tz_training' : tz_train},\n",
    "    rvar = 'click', lev = 'yes',\n",
    "    evar = ['imppat', 'clpat', 'ctrpat']\n",
    ")\n",
    "\n",
    "lr_mc1.summary(vif = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71c84b94",
   "metadata": {},
   "source": [
    "... discuss the results here ...\n",
    "#### 1. The intercept with OR = 0.004, OR% = -99.6%: The odds of a click occurring when all other variables are zero is very low but make non sense.\n",
    "\n",
    "#### 2. The imppat with OR = 1.000, OR% = 0.0%: imppat means 'Number of past impressions that showed the TZ ad in the app in the hour.' OR = 1.000 means The odds of a click do not significantly increase with an increase in the number of past impressions of the TZ ad in the app within the hour. coefficient is very close to zero, this means a very small or negligible effect.\n",
    "\n",
    "#### 3. The clpat with OR = 1.002, OR% = 0.2%: clpat means 'Number of past clicks the TZ ad has received in the app in the hour' OR = 1.002 means for the additional number of past clicks the TZ ad has received in the app in the hour, the odds of a click will increase by 0.2% or increase by factor of 1.002. This is a positive relationship, suggesting that more past clicks are associated with a higher likelihood of a future click.\n",
    "\n",
    "#### 4. The ctrpat with OR = 1.615, OR% = 61.5%: ctrpat means 'Past CTR (Ã— 100) of the TZ ad in the app in the hour.' OR = 1.615 means for the additional Past CTR (Ã— 100) of the TZ ad in the app in the hour, the odds of a click will increase by 61.5% or increase by factor of 1.615. This is a substantial increase, indicating that ads with higher past click-through rates are much more likely to be clicked.\n",
    "\n",
    "#### 5. The Pseudo R-squared value is 0.035, which is relatively low, which suggests that the model explains a small portion of the variance in the likelihood of a click. \n",
    "\n",
    "#### 6. Pseudo R-squared (McFadden adjusted): 0.035, the R-squared and adjusted R-squared values are the same, indicating that the model does not include any unnecessary variables.\n",
    "\n",
    "#### 7. The Area under to RO curve is 0.676, indicates that the model has moderate predictive power.\n",
    "\n",
    "#### 8. The Chi-square test is 314.248 with a p-value of <0.001, indicating that the explanatory variables in the model are statistically significantly associated with the response variable.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "87dc4f4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr_mc1.plot('pred')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1019915",
   "metadata": {},
   "source": [
    "#### Through the prediction plot\n",
    "\n",
    "#### 1. the probability of a click decreases as imppat increases. This is a negative relationship, suggesting that more imppat are associated with a lower likelihood of a future click.\n",
    "\n",
    "#### 2. the probability of a click increases as clpat increases. This is a positive relationship, suggesting that more clpat are associated with a higher likelihood of a future click.\n",
    "\n",
    "#### 3. the probability of a click slightly increases as ctrpat increases. This is a positive relationship, suggesting that more ctrpat are associated with a slightly higher likelihood of a future click."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "e6598f93",
   "metadata": {},
   "source": [
    "b. Some of the variables in the dataset are highly correlated with each other. In particular, `imppat` and `clpat` have a strong positive correlation of 0.97. Discuss the implications of this (very) high level of collinearity and also different approaches to deal with it. What are the implications for the model and the interpretation of the Prediction plots? As part of your answer, discuss the change in the Prediction plot for `imppat` when you remove `clpat` from the model you estimated for II.a (4 points)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7228265e",
   "metadata": {},
   "source": [
    "> Note: Assign your new model without `clpat` to a new object `lr_mc2`. Calculate VIF statistics for each explanatory variable in the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "df8dc2cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : tz_training\n",
      "Response variable    : click\n",
      "Level                : yes\n",
      "Explanatory variables: imppat, ctrpat\n",
      "Null hyp.: There is no effect of x on click\n",
      "Alt. hyp.: There is an effect of x on click\n",
      "\n",
      "              OR     OR%  coefficient  std.error  z.value p.value     \n",
      "Intercept  0.004  -99.6%        -5.53      0.068  -80.814  < .001  ***\n",
      "imppat     1.000    0.0%         0.00      0.000    5.460  < .001  ***\n",
      "ctrpat     1.733   73.3%         0.55      0.030   18.422  < .001  ***\n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.031\n",
      "Pseudo R-squared (McFadden adjusted): 0.031\n",
      "Area under the RO Curve (AUC): 0.674\n",
      "Log-likelihood: -4290.903, AIC: 8587.805, BIC: 8615.945\n",
      "Chi-squared: 278.619, df(2), p.value < 0.001 \n",
      "Nr obs: 87,535\n",
      "\n",
      "Variance inflation factors:\n",
      "\n",
      "          vif    Rsq\n",
      "imppat  1.134  0.118\n",
      "ctrpat  1.134  0.118\n"
     ]
    }
   ],
   "source": [
    "lr_mc2 = rsm.model.logistic(\n",
    "    data = {'tz_training' : tz_train},\n",
    "    rvar = 'click', lev = 'yes',\n",
    "    evar = ['imppat', 'ctrpat']\n",
    ")\n",
    "\n",
    "lr_mc2.summary(vif = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c69cec6",
   "metadata": {},
   "source": [
    "#### 1. High correlation between explanatory variables is difficult to determine the individual effect of collinear variables on the response variable.\n",
    "\n",
    "#### 2. After we remove clpat from the model, we can see the VIF of imppat and ctrpat are both 1.134, which is lower than 5. This means the remaining variables do not suffer from problematic multicollinearity.\n",
    "\n",
    "#### 3. The R-squared values associated with the VIF for both variables are 0.118, which indicates that approximately 11.8% of the variance of each predictor is explained by the other predictor. This is a moderate amount, and with VIFs at this level, the concern for collinearity is substantially reduced.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "64a6b164",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr_mc2.plot('pred')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f7ac503",
   "metadata": {},
   "source": [
    "#### WHY VIF CHANGED AFTER WE REMOVE CLPAT FROM THE MODEL?\n",
    "\n",
    "#### The VIFs for clpat and imppat were quite high initially, indicating significant multicollinearity, which can inflate the variance of the estimated regression coefficients, making them unstable and unreliable. After clpat was removed, the VIFs for both remaining variables (imppat and ctrpat) dropped to near 1, which indicates that the multicollinearity has been significantly reduced or eliminated. \n",
    "\n",
    "#### WHY PREDICTION PLOT CHANGED AFTER WE REMOVE CLPAT FROM THE MODEL?\n",
    " \n",
    "#### Due to the omitted variable bias. Here, we set the omitted variable as 'clpat,' if we dropped:\n",
    "\n",
    "#### 1. The previously masked effects of \"imppat\" and \"ctrpat\" become more apparent.\n",
    "\n",
    "#### 2. These variables can now explain the variability in the response variable that \"clpat\" was accounting for, resulting in a more pronounced relationship in prediction plots.\n",
    "\n",
    "#### 3. The true relationship between \"imppat\" and \"ctrpat\" with the response variable may be revealed, as they are no longer competing with \"clpat\" for explanatory power.\n",
    "\n",
    "#### That's why the plot changed after we remove clpat from the model: the explanatory power of imppat and ctrpat are more apparent."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "7683d2e9",
   "metadata": {},
   "source": [
    "c. Estimate another logistic regression model with `click` as the response variable and `time_fct`, `app`, `imppat`, `clpat`, and `ctrpat` as the explanatory variable. Why are the Prediction plots for `imppat`, `clpat`, and `ctrpat` different compared to the plots from the model you estimated in II.a? Please be specific and investigate beyond simply stating the statistical problem (4 points).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "684ddad0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : tz_training\n",
      "Response variable    : click\n",
      "Level                : yes\n",
      "Explanatory variables: time_fct, app, imppat, clpat, ctrpat\n",
      "Null hyp.: There is no effect of x on click\n",
      "Alt. hyp.: There is an effect of x on click\n",
      "\n",
      "                 OR      OR%  coefficient   std.error  z.value p.value     \n",
      "Intercept     0.012   -98.8%        -4.42       0.284  -15.575  < .001  ***\n",
      "time_fct[2]   0.588   -41.2%        -0.53       0.323   -1.644     0.1     \n",
      "time_fct[3]   0.693   -30.7%        -0.37       0.461   -0.795   0.426     \n",
      "time_fct[4]   0.000  -100.0%       -23.83   43904.903   -0.001     1.0     \n",
      "time_fct[5]   0.000  -100.0%       -23.86   57249.164   -0.000     1.0     \n",
      "time_fct[6]   0.359   -64.1%        -1.03       1.027   -0.999   0.318     \n",
      "time_fct[7]   1.220    22.0%         0.20       0.438    0.453    0.65     \n",
      "time_fct[8]   1.135    13.5%         0.13       0.309    0.411   0.681     \n",
      "time_fct[9]   1.063     6.3%         0.06       0.299    0.203   0.839     \n",
      "time_fct[10]  0.843   -15.7%        -0.17       0.303   -0.561   0.575     \n",
      "time_fct[11]  0.637   -36.3%        -0.45       0.288   -1.565   0.118     \n",
      "time_fct[12]  0.834   -16.6%        -0.18       0.292   -0.620   0.535     \n",
      "time_fct[13]  0.535   -46.5%        -0.63       0.306   -2.047   0.041    *\n",
      "time_fct[14]  0.982    -1.8%        -0.02       0.257   -0.069   0.945     \n",
      "time_fct[15]  0.840   -16.0%        -0.17       0.272   -0.639   0.523     \n",
      "time_fct[16]  0.874   -12.6%        -0.13       0.279   -0.483   0.629     \n",
      "time_fct[17]  0.864   -13.6%        -0.15       0.296   -0.493   0.622     \n",
      "time_fct[18]  0.942    -5.8%        -0.06       0.286   -0.208   0.835     \n",
      "time_fct[19]  1.178    17.8%         0.16       0.251    0.651   0.515     \n",
      "time_fct[20]  1.188    18.8%         0.17       0.247    0.698   0.485     \n",
      "time_fct[21]  0.782   -21.8%        -0.25       0.261   -0.942   0.346     \n",
      "time_fct[22]  0.933    -6.7%        -0.07       0.259   -0.267   0.789     \n",
      "time_fct[23]  0.993    -0.7%        -0.01       0.268   -0.025    0.98     \n",
      "time_fct[24]  1.134    13.4%         0.13       0.258    0.486   0.627     \n",
      "app[app2]     0.136   -86.4%        -2.00       0.351   -5.681  < .001  ***\n",
      "app[app3]     0.187   -81.3%        -1.67       1.016   -1.649   0.099    .\n",
      "app[app4]     0.487   -51.3%        -0.72       0.359   -2.004   0.045    *\n",
      "app[app5]     0.413   -58.7%        -0.88       1.011   -0.874   0.382     \n",
      "app[app6]     1.007     0.7%         0.01       0.216    0.034   0.973     \n",
      "app[app7]     0.708   -29.2%        -0.35       1.019   -0.340   0.734     \n",
      "app[app8]     0.000  -100.0%       -24.11   72717.592   -0.000     1.0     \n",
      "app[app9]     0.935    -6.5%        -0.07       0.271   -0.248   0.804     \n",
      "app[app10]    0.000  -100.0%       -24.02   75559.599   -0.000     1.0     \n",
      "app[app11]    1.365    36.5%         0.31       0.752    0.414   0.679     \n",
      "app[app12]    0.575   -42.5%        -0.55       0.274   -2.022   0.043    *\n",
      "app[app13]    2.790   179.0%         1.03       0.504    2.037   0.042    *\n",
      "app[app14]    0.246   -75.4%        -1.40       0.479   -2.927   0.003   **\n",
      "app[app15]    0.773   -22.7%        -0.26       0.723   -0.357   0.721     \n",
      "app[app16]    0.381   -61.9%        -0.96       0.733   -1.316   0.188     \n",
      "app[app17]    1.502    50.2%         0.41       0.727    0.560   0.576     \n",
      "app[app18]    0.108   -89.2%        -2.23       1.016   -2.190   0.029    *\n",
      "app[app19]    0.000  -100.0%       -24.05   93787.196   -0.000     1.0     \n",
      "app[app20]    0.000  -100.0%       -24.14   73366.877   -0.000     1.0     \n",
      "app[app21]    0.475   -52.5%        -0.74       0.416   -1.789   0.074    .\n",
      "app[app22]    0.517   -48.3%        -0.66       1.019   -0.648   0.517     \n",
      "app[app23]    3.549   254.9%         1.27       0.419    3.023   0.003   **\n",
      "app[app24]    2.411   141.1%         0.88       0.363    2.421   0.015    *\n",
      "app[app25]    1.571    57.1%         0.45       0.612    0.738    0.46     \n",
      "app[app26]    0.000  -100.0%       -24.07   63336.276   -0.000     1.0     \n",
      "app[app27]    0.292   -70.8%        -1.23       0.731   -1.683   0.092    .\n",
      "app[app28]    0.318   -68.2%        -1.14       0.603   -1.897   0.058    .\n",
      "app[app29]    2.584   158.4%         0.95       0.379    2.502   0.012    *\n",
      "app[app30]    0.000  -100.0%       -24.08   87078.077   -0.000     1.0     \n",
      "app[app31]    0.164   -83.6%        -1.81       0.735   -2.460   0.014    *\n",
      "app[app32]    0.000  -100.0%       -24.04   56046.291   -0.000     1.0     \n",
      "app[app33]    0.524   -47.6%        -0.65       0.376   -1.720   0.086    .\n",
      "app[app34]    0.000  -100.0%       -24.01   55897.140   -0.000     1.0     \n",
      "app[app35]    0.357   -64.3%        -1.03       1.019   -1.011   0.312     \n",
      "app[app36]    0.000  -100.0%       -24.00   78847.008   -0.000     1.0     \n",
      "app[app37]    0.741   -25.9%        -0.30       0.732   -0.410   0.682     \n",
      "app[app38]    0.000  -100.0%       -24.04   55273.917   -0.000     1.0     \n",
      "app[app39]    2.349   134.9%         0.85       0.449    1.904   0.057    .\n",
      "app[app40]    1.625    62.5%         0.49       0.530    0.915    0.36     \n",
      "app[app41]    0.816   -18.4%        -0.20       0.725   -0.281   0.779     \n",
      "app[app42]    2.909   190.9%         1.07       0.452    2.363   0.018    *\n",
      "app[app43]    0.000  -100.0%       -24.11   75901.133   -0.000     1.0     \n",
      "app[app44]    0.000  -100.0%       -24.05   46569.636   -0.001     1.0     \n",
      "app[app45]    1.920    92.0%         0.65       0.604    1.079   0.281     \n",
      "app[app46]    0.466   -53.4%        -0.76       1.020   -0.748   0.455     \n",
      "app[app47]    0.406   -59.4%        -0.90       1.012   -0.891   0.373     \n",
      "app[app48]    0.000  -100.0%       -24.05  106095.563   -0.000     1.0     \n",
      "app[app49]    0.259   -74.1%        -1.35       1.019   -1.324   0.185     \n",
      "imppat        1.000    -0.0%        -0.00       0.000   -1.131   0.258     \n",
      "clpat         1.001     0.1%         0.00       0.001    1.135   0.256     \n",
      "ctrpat        1.077     7.7%         0.07       0.117    0.637   0.524     \n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.056\n",
      "Pseudo R-squared (McFadden adjusted): 0.04\n",
      "Area under the RO Curve (AUC): 0.704\n",
      "Log-likelihood: -4180.646, AIC: 8511.292, BIC: 9214.776\n",
      "Chi-squared: 499.132, df(74), p.value < 0.001 \n",
      "Nr obs: 87,535\n",
      "\n",
      "Variance inflation factors:\n",
      "\n",
      "             vif    Rsq\n",
      "imppat    84.451  0.988\n",
      "clpat     80.266  0.988\n",
      "app       59.079  0.983\n",
      "ctrpat     9.033  0.889\n",
      "time_fct   4.988  0.799\n"
     ]
    }
   ],
   "source": [
    "lr_mc3 = rsm.model.logistic(\n",
    "    data = {'tz_training' : tz_train},\n",
    "    rvar = 'click', lev = 'yes',\n",
    "    evar = ['time_fct', 'app', 'imppat', 'clpat', 'ctrpat']\n",
    ")\n",
    "\n",
    "lr_mc3.summary(vif = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "368b6149",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x1000 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr_mc3.plot(\"pred\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14e5d3da",
   "metadata": {},
   "source": [
    " ... insert your answer here ...\n",
    "\n",
    " #### Overlap in Variable Explanations (Multicollinearity): The inclusion of the multi-level app variable might have introduced additional correlation with imppat, clpat, and ctrpat. This increased multicollinearity can destabilize model estimates, distorting the prediction plot shapes as the model compensates for these highly interrelated explanatory variables.\n",
    "\n",
    "#### Time Dynamics (Time Effects): Introducing time_fct helps capture temporal patterns in click behaviors that were possibly overlooked in the previous model. Controlling for these patterns could redistribute the significance of other explanatory variables in the model, reflected by changes in the prediction plots for imppat, clpat, and ctrpat.\n",
    "\n",
    "#### Distinct Impact of Applications (App-Specific Effects): The app variable may reveal the unique effects of different applications on click probability. If certain apps engage users more or prompt more interactions, this could alter the relationships between other explanatory variables and the probability of a click, impacting their prediction plots.\n",
    "\n",
    "#### Enhanced Model Fidelity (Improved Model Fit): Higher Pseudo R-squared and AUC values indicate the new model potentially captures the predictor-response relationships more accurately. This refined fitting could present smoother or altered trends in the prediction plots for imppat, clpat, and ctrpat, as the model estimates these relationships with greater precision.\n",
    "\n",
    "#### Adjustments in Prediction Plots (Prediction Plot Changes): Variations in the prediction plots could suggest that the new variables are assuming some of the explanatory power previously attributed to the original variables. The new model's more nuanced variable representation may lessen the direct associations between imppat, clpat, and ctrpat and the click response, leading to altered curve shapes and slopes.\n",
    "\n",
    "#### Modifications in Data Sampling (Sample Distribution Changes): If the datasets used for the two models differ in the distribution of key variables, this could affect parameter estimation and predictions. Changes in data could stem from different sampling strategies or data cleaning processes.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1914626a",
   "metadata": {},
   "source": [
    "## Part III: Decile Analysis of Logistic Regression Results (5 points)\n",
    "\n",
    "> Note: For the following questions, use only the \"test\" sample of impressions (i.e., 27,953 rows\n",
    "where \"training == 'test'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dbe65b29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27953"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tz_test = tz_gaming[tz_gaming[\"training\"] == 'test']\n",
    "len(tz_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bc9b5d5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>clut</th>\n",
       "      <th>ctrut</th>\n",
       "      <th>imppat</th>\n",
       "      <th>clpat</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "      <th>pred_logit</th>\n",
       "      <th>pred_rnd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>115483</th>\n",
       "      <td>test</td>\n",
       "      <td>I399982</td>\n",
       "      <td>no</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>app2</td>\n",
       "      <td>ios</td>\n",
       "      <td>2110</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>23216</td>\n",
       "      <td>19</td>\n",
       "      <td>0.081840</td>\n",
       "      <td>-1.852059</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id847352</td>\n",
       "      <td>0.001093</td>\n",
       "      <td>0.009435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115484</th>\n",
       "      <td>test</td>\n",
       "      <td>I399986</td>\n",
       "      <td>no</td>\n",
       "      <td>17</td>\n",
       "      <td>17</td>\n",
       "      <td>app14</td>\n",
       "      <td>android</td>\n",
       "      <td>291</td>\n",
       "      <td>1</td>\n",
       "      <td>0.343643</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.351351</td>\n",
       "      <td>3665</td>\n",
       "      <td>14</td>\n",
       "      <td>0.381992</td>\n",
       "      <td>-0.296415</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id457437</td>\n",
       "      <td>0.003609</td>\n",
       "      <td>0.008930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115485</th>\n",
       "      <td>test</td>\n",
       "      <td>I399991</td>\n",
       "      <td>no</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>364</td>\n",
       "      <td>3</td>\n",
       "      <td>0.824176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>173353</td>\n",
       "      <td>2292</td>\n",
       "      <td>1.322158</td>\n",
       "      <td>0.099201</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id792352</td>\n",
       "      <td>0.020527</td>\n",
       "      <td>0.008806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115486</th>\n",
       "      <td>test</td>\n",
       "      <td>I399992</td>\n",
       "      <td>no</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>app6</td>\n",
       "      <td>android</td>\n",
       "      <td>59</td>\n",
       "      <td>2</td>\n",
       "      <td>3.389831</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>2.702703</td>\n",
       "      <td>3474</td>\n",
       "      <td>53</td>\n",
       "      <td>1.525619</td>\n",
       "      <td>-0.186421</td>\n",
       "      <td>0.050679</td>\n",
       "      <td>id115678</td>\n",
       "      <td>0.021922</td>\n",
       "      <td>0.008896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115487</th>\n",
       "      <td>test</td>\n",
       "      <td>I399994</td>\n",
       "      <td>no</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>498</td>\n",
       "      <td>7</td>\n",
       "      <td>1.405622</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1.886792</td>\n",
       "      <td>77884</td>\n",
       "      <td>1201</td>\n",
       "      <td>1.542037</td>\n",
       "      <td>0.857281</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id705546</td>\n",
       "      <td>0.011703</td>\n",
       "      <td>0.008574</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       training     inum click  time time_fct    app mobile_os  impup  clup  \\\n",
       "115483     test  I399982    no    21       21   app2       ios   2110     0   \n",
       "115484     test  I399986    no    17       17  app14   android    291     1   \n",
       "115485     test  I399991    no    23       23   app1   android    364     3   \n",
       "115486     test  I399992    no    20       20   app6   android     59     2   \n",
       "115487     test  I399994    no    18       18   app1       ios    498     7   \n",
       "\n",
       "           ctrup  ...  clut     ctrut  imppat  clpat    ctrpat       rnd  \\\n",
       "115483  0.000000  ...     0  0.000000   23216     19  0.081840 -1.852059   \n",
       "115484  0.343643  ...     1  1.351351    3665     14  0.381992 -0.296415   \n",
       "115485  0.824176  ...     0  0.000000  173353   2292  1.322158  0.099201   \n",
       "115486  3.389831  ...     1  2.702703    3474     53  1.525619 -0.186421   \n",
       "115487  1.405622  ...     1  1.886792   77884   1201  1.542037  0.857281   \n",
       "\n",
       "        pred_vneta        id  pred_logit  pred_rnd  \n",
       "115483    0.003961  id847352    0.001093  0.009435  \n",
       "115484    0.003961  id457437    0.003609  0.008930  \n",
       "115485    0.003961  id792352    0.020527  0.008806  \n",
       "115486    0.050679  id115678    0.021922  0.008896  \n",
       "115487    0.003961  id705546    0.011703  0.008574  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tz_gaming.tail()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "967c4929",
   "metadata": {},
   "source": [
    "a. Assign each impression to a decile based on the predicted probability of click through (`pred_logit`) based on the model estimated in I.a. Create a new variable `pred_logit_dec` that captures this information. Note: The first decile should have the highest average click-through rate. If not, make sure to \"reverse\" the decile numbers (i.e., 10 becomes 1, 9 becomes 2, etc.). Use the `xtile` function from the `pyrsm` package to create the deciles (2 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a6c54059",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>ctrut</th>\n",
       "      <th>imppat</th>\n",
       "      <th>clpat</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "      <th>pred_logit</th>\n",
       "      <th>pred_rnd</th>\n",
       "      <th>pred_logit_dec</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>train</td>\n",
       "      <td>I7</td>\n",
       "      <td>no</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>app8</td>\n",
       "      <td>ios</td>\n",
       "      <td>439</td>\n",
       "      <td>2</td>\n",
       "      <td>0.455581</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71</td>\n",
       "      <td>1</td>\n",
       "      <td>1.408451</td>\n",
       "      <td>-1.207066</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id247135</td>\n",
       "      <td>3.382977e-13</td>\n",
       "      <td>0.009222</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>train</td>\n",
       "      <td>I23</td>\n",
       "      <td>no</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>67312</td>\n",
       "      <td>1069</td>\n",
       "      <td>1.588127</td>\n",
       "      <td>0.277429</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id245079</td>\n",
       "      <td>1.156355e-02</td>\n",
       "      <td>0.008751</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>train</td>\n",
       "      <td>I28</td>\n",
       "      <td>no</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>app5</td>\n",
       "      <td>ios</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>331</td>\n",
       "      <td>1</td>\n",
       "      <td>0.302115</td>\n",
       "      <td>1.084441</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id927245</td>\n",
       "      <td>2.655311e-03</td>\n",
       "      <td>0.008505</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>train</td>\n",
       "      <td>I30</td>\n",
       "      <td>no</td>\n",
       "      <td>19</td>\n",
       "      <td>19</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>71114</td>\n",
       "      <td>1001</td>\n",
       "      <td>1.407599</td>\n",
       "      <td>-2.345698</td>\n",
       "      <td>0.018965</td>\n",
       "      <td>id922188</td>\n",
       "      <td>1.349420e-02</td>\n",
       "      <td>0.009600</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>train</td>\n",
       "      <td>I35</td>\n",
       "      <td>no</td>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>3834</td>\n",
       "      <td>29</td>\n",
       "      <td>0.756390</td>\n",
       "      <td>...</td>\n",
       "      <td>1.215805</td>\n",
       "      <td>183852</td>\n",
       "      <td>2317</td>\n",
       "      <td>1.260253</td>\n",
       "      <td>0.429125</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id355833</td>\n",
       "      <td>1.868222e-03</td>\n",
       "      <td>0.008704</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  training inum click  time time_fct   app mobile_os  impup  clup     ctrup  \\\n",
       "0    train   I7    no     9        9  app8       ios    439     2  0.455581   \n",
       "1    train  I23    no    15       15  app1       ios     64     0  0.000000   \n",
       "2    train  I28    no    12       12  app5       ios     80     0  0.000000   \n",
       "3    train  I30    no    19       19  app1       ios     25     0  0.000000   \n",
       "4    train  I35    no    24       24  app1   android   3834    29  0.756390   \n",
       "\n",
       "   ...     ctrut  imppat  clpat    ctrpat       rnd  pred_vneta        id  \\\n",
       "0  ...  0.000000      71      1  1.408451 -1.207066    0.003961  id247135   \n",
       "1  ...  0.000000   67312   1069  1.588127  0.277429    0.003961  id245079   \n",
       "2  ...  0.000000     331      1  0.302115  1.084441    0.003961  id927245   \n",
       "3  ...  0.000000   71114   1001  1.407599 -2.345698    0.018965  id922188   \n",
       "4  ...  1.215805  183852   2317  1.260253  0.429125    0.003961  id355833   \n",
       "\n",
       "     pred_logit  pred_rnd  pred_logit_dec  \n",
       "0  3.382977e-13  0.009222              10  \n",
       "1  1.156355e-02  0.008751               3  \n",
       "2  2.655311e-03  0.008505               7  \n",
       "3  1.349420e-02  0.009600               3  \n",
       "4  1.868222e-03  0.008704               8  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tz_gaming[\"pred_logit_dec\"] = (\n",
    "    tz_gaming\n",
    "    .groupby(tz_gaming['training'] == 'test')\n",
    "    .pred_logit\n",
    "    .transform(rsm.xtile, n=10, rev=True)\n",
    ")\n",
    "\n",
    "tz_gaming.head()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "5891e241",
   "metadata": {},
   "source": [
    "b. Report the number of impressions, the number of clicks, and the click-through rate for the TZ ad per decile and save this information to a DataFrame. Use the name `dec_tab` for the new data frame (2 points)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9bee1054",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_logit_dec</th>\n",
       "      <th>nr_impressions</th>\n",
       "      <th>nr_click</th>\n",
       "      <th>ctr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2796</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.036838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2793</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.017186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2788</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.015065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2796</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.010730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2802</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.005353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2796</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.002504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2794</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.002505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2796</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.001073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2796</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.001431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>2796</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.004292</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pred_logit_dec  nr_impressions  nr_click       ctr\n",
       "0               1            2796     103.0  0.036838\n",
       "1               2            2793      48.0  0.017186\n",
       "2               3            2788      42.0  0.015065\n",
       "3               4            2796      30.0  0.010730\n",
       "4               5            2802      15.0  0.005353\n",
       "5               6            2796       7.0  0.002504\n",
       "6               7            2794       7.0  0.002505\n",
       "7               8            2796       3.0  0.001073\n",
       "8               9            2796       4.0  0.001431\n",
       "9              10            2796      12.0  0.004292"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# your data frame should have columns called 'nr_impressions', 'nr_clicks', and 'ctr'\n",
    "# to calculate these values you need deciles, the number of rows (impressions)\n",
    "# in each decile, the number of clicks in each decile using the `click` variable,\n",
    "# and the ratio of clicks to impressions (ctr)\n",
    "\n",
    "tz_gaming['click_yes'] = rsm.ifelse(\n",
    "    tz_gaming['click'] == 'yes', 1, rsm.ifelse(tz_gaming['click'] == 'no', 0, np.nan)\n",
    ")\n",
    "\n",
    "dec_tab = (\n",
    "    tz_gaming[tz_gaming.training == 'test'].groupby('pred_logit_dec')\n",
    "    .agg(\n",
    "        nr_impressions = ('pred_logit', 'count'),\n",
    "        nr_click = ('click_yes', 'sum'),\n",
    "        ctr = ('click_yes', 'mean')\n",
    "    )\n",
    "    .reset_index()\n",
    ")\n",
    "\n",
    "dec_tab"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "395633c9",
   "metadata": {},
   "source": [
    "c. Create a bar chart of click-through rates per decile (i.e., use `pred_logit_dec` as the x-variable and `ctr` as the y-variable). Note that the \"click through rate\" is not the same as the \"predicted probability of click.\" The click-through rate captures the proportion of impressions in a given group (e.g., in a decile) that actually resulted in a click (1 point)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3373269e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = dec_tab.plot.bar(\n",
    "    x = 'pred_logit_dec', \n",
    "    y = 'ctr',\n",
    "    rot = 0,\n",
    "    color = 'slateblue',\n",
    "    legend = None\n",
    ")\n",
    "\n",
    "fig = fig.axhline(\n",
    "    y = dec_tab.ctr.mean(),\n",
    "    color = 'red',\n",
    "    linestyle = '--'\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7d58aeb",
   "metadata": {},
   "source": [
    "## Part IV: Lift, Gains, and Profit (15 points)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "dcbadd21",
   "metadata": {},
   "source": [
    "Use the `dec_tab` DataFrame you created in Part III for the following calculations.\n",
    "\n",
    "a. Write python code to generate a table with the cumulative proportion of impressions and the cumulative gains for each decile (8 points)\n",
    "\n",
    "> Note: Do NOT use any specialized python packages to construct the gains table. Write the python code from scratch. Feel free use ChatGPT or CoPilot, but make sure that it does not use any specialized packages to construct the gains table. Be prepared to discuss the code you submit for this question in class if called upon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "01e49bcf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_logit_dec</th>\n",
       "      <th>nr_impressions</th>\n",
       "      <th>nr_click</th>\n",
       "      <th>ctr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2796</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.036838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2793</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.017186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2788</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.015065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2796</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.010730</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2802</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.005353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2796</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.002504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2794</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.002505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2796</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.001073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2796</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.001431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>2796</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.004292</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pred_logit_dec  nr_impressions  nr_click       ctr\n",
       "0               1            2796     103.0  0.036838\n",
       "1               2            2793      48.0  0.017186\n",
       "2               3            2788      42.0  0.015065\n",
       "3               4            2796      30.0  0.010730\n",
       "4               5            2802      15.0  0.005353\n",
       "5               6            2796       7.0  0.002504\n",
       "6               7            2794       7.0  0.002505\n",
       "7               8            2796       3.0  0.001073\n",
       "8               9            2796       4.0  0.001431\n",
       "9              10            2796      12.0  0.004292"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dec_tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "70aa23cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_logit_dec</th>\n",
       "      <th>nr_impressions</th>\n",
       "      <th>nr_click</th>\n",
       "      <th>ctr</th>\n",
       "      <th>cum_impressions</th>\n",
       "      <th>cum_prop_impressions</th>\n",
       "      <th>Gains</th>\n",
       "      <th>cum_Gains</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2796</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.036838</td>\n",
       "      <td>2796</td>\n",
       "      <td>0.100025</td>\n",
       "      <td>0.380074</td>\n",
       "      <td>0.380074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2793</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.017186</td>\n",
       "      <td>5589</td>\n",
       "      <td>0.199943</td>\n",
       "      <td>0.177122</td>\n",
       "      <td>0.557196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2788</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.015065</td>\n",
       "      <td>8377</td>\n",
       "      <td>0.299682</td>\n",
       "      <td>0.154982</td>\n",
       "      <td>0.712177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2796</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.010730</td>\n",
       "      <td>11173</td>\n",
       "      <td>0.399707</td>\n",
       "      <td>0.110701</td>\n",
       "      <td>0.822878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2802</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.005353</td>\n",
       "      <td>13975</td>\n",
       "      <td>0.499946</td>\n",
       "      <td>0.055351</td>\n",
       "      <td>0.878229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>2796</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.002504</td>\n",
       "      <td>16771</td>\n",
       "      <td>0.599971</td>\n",
       "      <td>0.025830</td>\n",
       "      <td>0.904059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>2794</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.002505</td>\n",
       "      <td>19565</td>\n",
       "      <td>0.699925</td>\n",
       "      <td>0.025830</td>\n",
       "      <td>0.929889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>2796</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.001073</td>\n",
       "      <td>22361</td>\n",
       "      <td>0.799950</td>\n",
       "      <td>0.011070</td>\n",
       "      <td>0.940959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>2796</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.001431</td>\n",
       "      <td>25157</td>\n",
       "      <td>0.899975</td>\n",
       "      <td>0.014760</td>\n",
       "      <td>0.955720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>2796</td>\n",
       "      <td>12.0</td>\n",
       "      <td>0.004292</td>\n",
       "      <td>27953</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.044280</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pred_logit_dec  nr_impressions  nr_click       ctr  cum_impressions  \\\n",
       "0               1            2796     103.0  0.036838             2796   \n",
       "1               2            2793      48.0  0.017186             5589   \n",
       "2               3            2788      42.0  0.015065             8377   \n",
       "3               4            2796      30.0  0.010730            11173   \n",
       "4               5            2802      15.0  0.005353            13975   \n",
       "5               6            2796       7.0  0.002504            16771   \n",
       "6               7            2794       7.0  0.002505            19565   \n",
       "7               8            2796       3.0  0.001073            22361   \n",
       "8               9            2796       4.0  0.001431            25157   \n",
       "9              10            2796      12.0  0.004292            27953   \n",
       "\n",
       "   cum_prop_impressions     Gains  cum_Gains  \n",
       "0              0.100025  0.380074   0.380074  \n",
       "1              0.199943  0.177122   0.557196  \n",
       "2              0.299682  0.154982   0.712177  \n",
       "3              0.399707  0.110701   0.822878  \n",
       "4              0.499946  0.055351   0.878229  \n",
       "5              0.599971  0.025830   0.904059  \n",
       "6              0.699925  0.025830   0.929889  \n",
       "7              0.799950  0.011070   0.940959  \n",
       "8              0.899975  0.014760   0.955720  \n",
       "9              1.000000  0.044280   1.000000  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## cumulative proportion of impressions\n",
    "dec_tab['cum_impressions'] = dec_tab.nr_impressions.cumsum()\n",
    "dec_tab\n",
    "\n",
    "dec_tab['cum_prop_impressions'] = dec_tab.cum_impressions / dec_tab.nr_impressions.sum()\n",
    "## gains: proportion of total number of impressions accounted for by each decile\n",
    "dec_tab['Gains'] = dec_tab.nr_click / dec_tab.nr_click.sum()\n",
    "dec_tab\n",
    "\n",
    "dec_tab['cum_Gains'] = dec_tab.Gains.cumsum()\n",
    "dec_tab"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "fc77f760",
   "metadata": {},
   "source": [
    "b. Use `seaborn`, `matplotlib`, or `pandas` to create a chart showing the cumulative gains per decile along with a (diagonal) reference line to represent the \"no model\" scenario. Put cumulative gains on the Y-axis and cumulative proportion of impressions on the X-axis (7 points)\n",
    "\n",
    "> Note: Do NOT use any specialized packages to construct the gains chart. Write the python code from scratch. Feel free use ChatGPT or CoPilot, but make sure that it does not use any specialized packages to construct the gains table. Be prepared to discuss the code you submit for this question in class if called upon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4d08f18c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred_logit_dec</th>\n",
       "      <th>nr_impressions</th>\n",
       "      <th>nr_click</th>\n",
       "      <th>ctr</th>\n",
       "      <th>cum_impressions</th>\n",
       "      <th>cum_prop_impressions</th>\n",
       "      <th>Gains</th>\n",
       "      <th>cum_Gains</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2796</td>\n",
       "      <td>103.0</td>\n",
       "      <td>0.036838</td>\n",
       "      <td>2796</td>\n",
       "      <td>0.100025</td>\n",
       "      <td>0.380074</td>\n",
       "      <td>0.380074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2793</td>\n",
       "      <td>48.0</td>\n",
       "      <td>0.017186</td>\n",
       "      <td>5589</td>\n",
       "      <td>0.199943</td>\n",
       "      <td>0.177122</td>\n",
       "      <td>0.557196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2788</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.015065</td>\n",
       "      <td>8377</td>\n",
       "      <td>0.299682</td>\n",
       "      <td>0.154982</td>\n",
       "      <td>0.712177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2796</td>\n",
       "      <td>30.0</td>\n",
       "      <td>0.010730</td>\n",
       "      <td>11173</td>\n",
       "      <td>0.399707</td>\n",
       "      <td>0.110701</td>\n",
       "      <td>0.822878</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pred_logit_dec  nr_impressions  nr_click       ctr  cum_impressions  \\\n",
       "0               0               0       0.0  0.000000                0   \n",
       "1               1            2796     103.0  0.036838             2796   \n",
       "2               2            2793      48.0  0.017186             5589   \n",
       "3               3            2788      42.0  0.015065             8377   \n",
       "4               4            2796      30.0  0.010730            11173   \n",
       "\n",
       "   cum_prop_impressions     Gains  cum_Gains  \n",
       "0              0.000000  0.000000   0.000000  \n",
       "1              0.100025  0.380074   0.380074  \n",
       "2              0.199943  0.177122   0.557196  \n",
       "3              0.299682  0.154982   0.712177  \n",
       "4              0.399707  0.110701   0.822878  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_row = pd.DataFrame({col: [0] for col in dec_tab.columns})\n",
    "dec_tab = pd.concat([new_row, dec_tab]).reset_index(drop=True)\n",
    "dec_tab.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "92690368",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5, 5))\n",
    "sns.lineplot(x='cum_prop_impressions', y='cum_Gains', data=dec_tab, marker='o', linestyle='-', color='blue')\n",
    "\n",
    "plt.plot([0, 1], [0, 1], color='black', linestyle='--', label='No Model Scenario')\n",
    "\n",
    "plt.title('Cumulative Gains Chart with No Model Scenario')\n",
    "plt.xlabel('Cumulative Proportion of Impressions')\n",
    "plt.ylabel('Cumulative Gains')\n",
    "plt.xlim([0, 1])\n",
    "plt.ylim([0, 1])\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbeffd06",
   "metadata": {},
   "source": [
    "## Part V: Confusion matrix (10 points)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "75aa6cc2",
   "metadata": {},
   "source": [
    "a. Create a \"confusion matrix\" based on the predictions from the logistic regression model you estimated in Part I.a (i.e., the model used to generate `pred_logit`). Again, use **only** data from the test set here (i.e., \"training == 'test'\"). Use the financial assumptions mentioned above, and repeated in section VI below, to determine an appropriate cut-off (i.e., breakeven). Calculate \"accuracy\" based on the confusion matrix you created (2 points)\n",
    "\n",
    "> Note: Do NOT use any specialized packages to construct the confusion matrix. Code the matrix from scratch.  Feel free use ChatGPT or CoPilot, but make sure that it does not use any specialized packages to construct the gains table. Be prepared to discuss the code you submit for this question in class if called upon"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4250719d",
   "metadata": {},
   "source": [
    "> Note use the code format below to store the relevant values from your confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0442a316",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.01, 0.008)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Targeting of impressions to consumers covered by the Vneta ad-network to date has been (approximately) random\n",
    "\n",
    "#Cost per 1,000 video impressions (CPM) is $10\n",
    "cost = 10 / 1000\n",
    "\n",
    "#Conversion to sign-up as a TZ game player after clicking on an ad is 5%\n",
    "cost_per_click = cost / 0.05\n",
    "#The expected CLV of customers that sign-up with TZ after clicking on an ad is approximately $25\n",
    "clv = 25\n",
    "\n",
    "#The price charged for the data by Vneta is $50K\n",
    "#data_price_Vneta = 50000 #free for this question\n",
    "\n",
    "#The price charged for the data science consulting services by Vneta is $150K\n",
    "#consulting_price_Vneta = 150000 #free for this question\n",
    "\n",
    "#calculate the break_even\n",
    "break_even = cost_per_click / clv\n",
    "\n",
    "cost, break_even"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "33194be5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_39058/163330509.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  tz_test['pred_binary'] = np.where(tz_test['pred_logit'] > break_even, 1, 0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>clpat</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "      <th>pred_logit</th>\n",
       "      <th>pred_rnd</th>\n",
       "      <th>pred_logit_dec</th>\n",
       "      <th>click_yes</th>\n",
       "      <th>pred_binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>87535</th>\n",
       "      <td>test</td>\n",
       "      <td>I300002</td>\n",
       "      <td>no</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>1458</td>\n",
       "      <td>3</td>\n",
       "      <td>0.205761</td>\n",
       "      <td>...</td>\n",
       "      <td>957</td>\n",
       "      <td>1.405018</td>\n",
       "      <td>0.147891</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id466983</td>\n",
       "      <td>1.020981e-02</td>\n",
       "      <td>0.008791</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87536</th>\n",
       "      <td>test</td>\n",
       "      <td>I300006</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>app40</td>\n",
       "      <td>ios</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.383246</td>\n",
       "      <td>0.018965</td>\n",
       "      <td>id946375</td>\n",
       "      <td>8.665095e-03</td>\n",
       "      <td>0.008718</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87537</th>\n",
       "      <td>test</td>\n",
       "      <td>I300012</td>\n",
       "      <td>no</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>app12</td>\n",
       "      <td>android</td>\n",
       "      <td>5057</td>\n",
       "      <td>6</td>\n",
       "      <td>0.118647</td>\n",
       "      <td>...</td>\n",
       "      <td>8</td>\n",
       "      <td>1.061008</td>\n",
       "      <td>1.274485</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id479295</td>\n",
       "      <td>1.910723e-14</td>\n",
       "      <td>0.008448</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87538</th>\n",
       "      <td>test</td>\n",
       "      <td>I300015</td>\n",
       "      <td>no</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>1993</td>\n",
       "      <td>10</td>\n",
       "      <td>0.501756</td>\n",
       "      <td>...</td>\n",
       "      <td>276</td>\n",
       "      <td>1.040057</td>\n",
       "      <td>0.673022</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id83284</td>\n",
       "      <td>6.240407e-03</td>\n",
       "      <td>0.008630</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87539</th>\n",
       "      <td>test</td>\n",
       "      <td>I300016</td>\n",
       "      <td>no</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>212</td>\n",
       "      <td>7</td>\n",
       "      <td>3.301887</td>\n",
       "      <td>...</td>\n",
       "      <td>874</td>\n",
       "      <td>1.524029</td>\n",
       "      <td>-0.785851</td>\n",
       "      <td>0.050679</td>\n",
       "      <td>id359434</td>\n",
       "      <td>1.233449e-02</td>\n",
       "      <td>0.009086</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      training     inum click  time time_fct    app mobile_os  impup  clup  \\\n",
       "87535     test  I300002    no    21       21   app1   android   1458     3   \n",
       "87536     test  I300006    no     3        3  app40       ios      3     0   \n",
       "87537     test  I300012    no     5        5  app12   android   5057     6   \n",
       "87538     test  I300015    no    10       10   app1   android   1993    10   \n",
       "87539     test  I300016    no    14       14   app1       ios    212     7   \n",
       "\n",
       "          ctrup  ...  clpat    ctrpat       rnd  pred_vneta        id  \\\n",
       "87535  0.205761  ...    957  1.405018  0.147891    0.003961  id466983   \n",
       "87536  0.000000  ...      0  0.000000  0.383246    0.018965  id946375   \n",
       "87537  0.118647  ...      8  1.061008  1.274485    0.003961  id479295   \n",
       "87538  0.501756  ...    276  1.040057  0.673022    0.003961   id83284   \n",
       "87539  3.301887  ...    874  1.524029 -0.785851    0.050679  id359434   \n",
       "\n",
       "         pred_logit  pred_rnd  pred_logit_dec  click_yes  pred_binary  \n",
       "87535  1.020981e-02  0.008791               4        0.0            1  \n",
       "87536  8.665095e-03  0.008718               4        0.0            1  \n",
       "87537  1.910723e-14  0.008448              10        0.0            0  \n",
       "87538  6.240407e-03  0.008630               5        0.0            0  \n",
       "87539  1.233449e-02  0.009086               3        0.0            1  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## how many pred_logit are greater than break_even?\n",
    "tz_test = tz_gaming[tz_gaming['training'] == 'test']\n",
    "len(tz_test[tz_test['pred_logit'] > break_even])\n",
    "\n",
    "tz_test['pred_binary'] = np.where(tz_test['pred_logit'] > break_even, 1, 0)\n",
    "\n",
    "tz_test.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "60f97618",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(221, 17021, 10661, 50)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## TP: true positive (pred P, actual P)\n",
    "## FP: false positive (pred P, actual N)\n",
    "## TN: true negative (pred N, actual N)\n",
    "## FN: false negative (pred N, actual P)\n",
    "\n",
    "# True Positives (TP): both actual and predicted values are 1\n",
    "TP = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_binary'] == 1))\n",
    "\n",
    "# True Negatives (TN): both actual and predicted values are 0\n",
    "TN = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_binary'] == 0))\n",
    "\n",
    "# False Positives (FP): actual value is 0 but predicted value is 1\n",
    "FP = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_binary'] == 1))\n",
    "\n",
    "# False Negatives (FN): actual value is 1 but predicted value is 0\n",
    "FN = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_binary'] == 0))\n",
    "\n",
    "TP, TN, FP, FN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "17d3b6b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>nr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TP</td>\n",
       "      <td>221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FP</td>\n",
       "      <td>10661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TN</td>\n",
       "      <td>17021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FN</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label     nr\n",
       "0    TP    221\n",
       "1    FP  10661\n",
       "2    TN  17021\n",
       "3    FN     50"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_logit = pd.DataFrame(\n",
    "    {\n",
    "        \"label\": [\"TP\", \"FP\", \"TN\", \"FN\"],\n",
    "        \"nr\": [TP, FP, TN, FN]\n",
    "            # TP, FP, TN, and FN values in that order\n",
    "    }\n",
    ")\n",
    "cm_logit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "7abdc703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6168210925482059"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# (TP + TN) / (TP + FP + TN + FN)\n",
    "accuracy_logit = (TP + TN) / (TP + FP + TN + FN)# float\n",
    "accuracy_logit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c1b0e7a",
   "metadata": {},
   "source": [
    "b. Calculate a DataFrame with elements from a confusion matrix based on `pred_rnd` created in Part I and calculate `accuracy` based on the confusion matrix you created (2 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49f0e17a",
   "metadata": {},
   "source": [
    "> Note use the code format below to store the relevant values from your confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2abbdaf3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_39058/2698818713.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  tz_test['pred_rnd_binary'] = np.where(tz_test['pred_rnd'] > break_even, 1, 0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>training</th>\n",
       "      <th>inum</th>\n",
       "      <th>click</th>\n",
       "      <th>time</th>\n",
       "      <th>time_fct</th>\n",
       "      <th>app</th>\n",
       "      <th>mobile_os</th>\n",
       "      <th>impup</th>\n",
       "      <th>clup</th>\n",
       "      <th>ctrup</th>\n",
       "      <th>...</th>\n",
       "      <th>ctrpat</th>\n",
       "      <th>rnd</th>\n",
       "      <th>pred_vneta</th>\n",
       "      <th>id</th>\n",
       "      <th>pred_logit</th>\n",
       "      <th>pred_rnd</th>\n",
       "      <th>pred_logit_dec</th>\n",
       "      <th>click_yes</th>\n",
       "      <th>pred_binary</th>\n",
       "      <th>pred_rnd_binary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>87535</th>\n",
       "      <td>test</td>\n",
       "      <td>I300002</td>\n",
       "      <td>no</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>1458</td>\n",
       "      <td>3</td>\n",
       "      <td>0.205761</td>\n",
       "      <td>...</td>\n",
       "      <td>1.405018</td>\n",
       "      <td>0.147891</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id466983</td>\n",
       "      <td>1.020981e-02</td>\n",
       "      <td>0.008791</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87536</th>\n",
       "      <td>test</td>\n",
       "      <td>I300006</td>\n",
       "      <td>no</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>app40</td>\n",
       "      <td>ios</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.383246</td>\n",
       "      <td>0.018965</td>\n",
       "      <td>id946375</td>\n",
       "      <td>8.665095e-03</td>\n",
       "      <td>0.008718</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87537</th>\n",
       "      <td>test</td>\n",
       "      <td>I300012</td>\n",
       "      <td>no</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>app12</td>\n",
       "      <td>android</td>\n",
       "      <td>5057</td>\n",
       "      <td>6</td>\n",
       "      <td>0.118647</td>\n",
       "      <td>...</td>\n",
       "      <td>1.061008</td>\n",
       "      <td>1.274485</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id479295</td>\n",
       "      <td>1.910723e-14</td>\n",
       "      <td>0.008448</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87538</th>\n",
       "      <td>test</td>\n",
       "      <td>I300015</td>\n",
       "      <td>no</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>app1</td>\n",
       "      <td>android</td>\n",
       "      <td>1993</td>\n",
       "      <td>10</td>\n",
       "      <td>0.501756</td>\n",
       "      <td>...</td>\n",
       "      <td>1.040057</td>\n",
       "      <td>0.673022</td>\n",
       "      <td>0.003961</td>\n",
       "      <td>id83284</td>\n",
       "      <td>6.240407e-03</td>\n",
       "      <td>0.008630</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87539</th>\n",
       "      <td>test</td>\n",
       "      <td>I300016</td>\n",
       "      <td>no</td>\n",
       "      <td>14</td>\n",
       "      <td>14</td>\n",
       "      <td>app1</td>\n",
       "      <td>ios</td>\n",
       "      <td>212</td>\n",
       "      <td>7</td>\n",
       "      <td>3.301887</td>\n",
       "      <td>...</td>\n",
       "      <td>1.524029</td>\n",
       "      <td>-0.785851</td>\n",
       "      <td>0.050679</td>\n",
       "      <td>id359434</td>\n",
       "      <td>1.233449e-02</td>\n",
       "      <td>0.009086</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      training     inum click  time time_fct    app mobile_os  impup  clup  \\\n",
       "87535     test  I300002    no    21       21   app1   android   1458     3   \n",
       "87536     test  I300006    no     3        3  app40       ios      3     0   \n",
       "87537     test  I300012    no     5        5  app12   android   5057     6   \n",
       "87538     test  I300015    no    10       10   app1   android   1993    10   \n",
       "87539     test  I300016    no    14       14   app1       ios    212     7   \n",
       "\n",
       "          ctrup  ...    ctrpat       rnd  pred_vneta        id    pred_logit  \\\n",
       "87535  0.205761  ...  1.405018  0.147891    0.003961  id466983  1.020981e-02   \n",
       "87536  0.000000  ...  0.000000  0.383246    0.018965  id946375  8.665095e-03   \n",
       "87537  0.118647  ...  1.061008  1.274485    0.003961  id479295  1.910723e-14   \n",
       "87538  0.501756  ...  1.040057  0.673022    0.003961   id83284  6.240407e-03   \n",
       "87539  3.301887  ...  1.524029 -0.785851    0.050679  id359434  1.233449e-02   \n",
       "\n",
       "       pred_rnd  pred_logit_dec  click_yes  pred_binary  pred_rnd_binary  \n",
       "87535  0.008791               4        0.0            1                1  \n",
       "87536  0.008718               4        0.0            1                1  \n",
       "87537  0.008448              10        0.0            0                1  \n",
       "87538  0.008630               5        0.0            0                1  \n",
       "87539  0.009086               3        0.0            1                1  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tz_test['pred_rnd_binary'] = np.where(tz_test['pred_rnd'] > break_even, 1, 0)\n",
    "\n",
    "tz_test.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bc1a900f",
   "metadata": {},
   "outputs": [],
   "source": [
    "## TP: true positive (pred P, actual P)\n",
    "## FP: false positive (pred P, actual N)\n",
    "## TN: true negative (pred N, actual N)\n",
    "## FN: false negative (pred N, actual P)\n",
    "\n",
    "# True Positives (TP): both actual and predicted values are 1\n",
    "TP = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_rnd_binary'] == 1))\n",
    "\n",
    "# True Negatives (TN): both actual and predicted values are 0\n",
    "TN = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_rnd_binary'] == 0))\n",
    "\n",
    "# False Positives (FP): actual value is 0 but predicted value is 1\n",
    "FP = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_rnd_binary'] == 1))\n",
    "\n",
    "# False Negatives (FN): actual value is 1 but predicted value is 0\n",
    "FN = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_rnd_binary'] == 0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e5e1e3d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>nr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TP</td>\n",
       "      <td>271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FP</td>\n",
       "      <td>27606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TN</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label     nr\n",
       "0    TP    271\n",
       "1    FP  27606\n",
       "2    TN     76\n",
       "3    FN      0"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_rnd = pd.DataFrame(\n",
    "    {\n",
    "        \"label\": [\"TP\", \"FP\", \"TN\", \"FN\"],\n",
    "        \"nr\":  [TP, FP, TN, FN]\n",
    "    }\n",
    ")\n",
    "\n",
    "cm_rnd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9df715c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.012413694415626229"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_rnd = (TP + TN) / (TP + FP + TN + FN)# float\n",
    "accuracy_rnd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70ad4b2f",
   "metadata": {},
   "source": [
    "c. Discuss the similarities and differences between the two confusion matrices. Which prediction (model) is best, based on the confusion matrix? Provide support for your conclusions (3 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "486905b0",
   "metadata": {},
   "source": [
    "#### 1. Similarities:\n",
    "\n",
    "##### a. Both models have successfully identified true positives, with pred_rnd identifying more (271 vs 221).\n",
    "\n",
    "##### b. Both models have false positives and true negatives, indicating that they can identify both correct and incorrect classifications to some extent.\n",
    "\n",
    "#### 2. Differences:\n",
    "\n",
    "##### a. The model based on pred_logit has a higher accuracy (0.61682109254820599 vs 0.012413694415626229), indicating that it is better to use pred_logit to predict the probability of a click.\n",
    "\n",
    "##### b. The pred_rnd model has significantly more false positives than the pred_logit model (27606 vs 10661). This indicates a much higher rate of incorrectly predicting the positive class for pred_rnd. --> cause more cost for the company.\n",
    "\n",
    "##### c. The pred_rnd model has no false negative, indicating that it predicted all positive instances correctly.\n",
    "\n",
    "##### d. The pred_rnd model has almost no true negatives (only 76), compared to a substantial number for pred_logit (17021). This suggests that pred_logit is much better at correctly identifying the negative class.\n",
    "\n",
    "#### 3. Conclusion:\n",
    "\n",
    "##### a. The pred_logit model is better at predicting the probability of a click, and it is better to use pred_logit to predict the probability of a click.\n",
    "\n",
    "##### b. Considering the balance between TP, FP, TN, and FN, pred_logit seems more balanced and likely to be the better model overall, as it maintains a reasonable rate of true positives while controlling the number of false positives and maintaining a high number of true negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "706bae83",
   "metadata": {},
   "source": [
    "d. Recalculate the confusion matrices from V.a and V.b using 0.5 as the cutoff. Based on these new matrices, again discuss the similarities and differences. Which model is best based on these new confusion matrices? Provide support for your conclusions (3 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "960c4954",
   "metadata": {},
   "source": [
    "> Note use the code format below to store the relevant values from your confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "57ec4fa9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_39058/552683376.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  tz_test['pred_binary2'] = np.where(tz_test['pred_logit'] > break_even2, 1, 0)\n"
     ]
    }
   ],
   "source": [
    "break_even2 = 0.5\n",
    "## Va:\n",
    "tz_test['pred_binary2'] = np.where(tz_test['pred_logit'] > break_even2, 1, 0)\n",
    "\n",
    "# True Positives (TP): both actual and predicted values are 1\n",
    "TP2 = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_binary2'] == 1))\n",
    "\n",
    "# True Negatives (TN): both actual and predicted values are 0\n",
    "TN2 = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_binary2'] == 0))\n",
    "\n",
    "# False Positives (FP): actual value is 0 but predicted value is 1\n",
    "FP2 = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_binary2'] == 1))\n",
    "\n",
    "# False Negatives (FN): actual value is 1 but predicted value is 0\n",
    "FN2 = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_binary2'] == 0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c7ea1686",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>nr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TP</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FP</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TN</td>\n",
       "      <td>27682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FN</td>\n",
       "      <td>271</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label     nr\n",
       "0    TP      0\n",
       "1    FP      0\n",
       "2    TN  27682\n",
       "3    FN    271"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_logit_recalc = pd.DataFrame(\n",
    "    {\n",
    "        \"label\": [\"TP\", \"FP\", \"TN\", \"FN\"],\n",
    "        \"nr\": [TP2, FP2, TN2, FN2]\n",
    "    }\n",
    ")\n",
    "\n",
    "cm_logit_recalc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "11aa3918",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9903051550817443"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_logit_recalc = (TP2 + TN2) / (TP2 + FP2 + TN2 + FN2)# float\n",
    "accuracy_logit_recalc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78ccc89a",
   "metadata": {},
   "source": [
    "> Note use the code format below to store the relevant values from your confusion matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "aeafde1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_39058/3279677207.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  tz_test['pred_rnd_binary2'] = np.where(tz_test['pred_rnd'] > break_even2, 1, 0)\n"
     ]
    }
   ],
   "source": [
    "## Vb:\n",
    "tz_test['pred_rnd_binary2'] = np.where(tz_test['pred_rnd'] > break_even2, 1, 0)\n",
    "\n",
    "# True Positives (TP): both actual and predicted values are 1\n",
    "TP3 = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_rnd_binary2'] == 1))\n",
    "\n",
    "# True Negatives (TN): both actual and predicted values are 0\n",
    "TN3 = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_rnd_binary2'] == 0))\n",
    "\n",
    "# False Positives (FP): actual value is 0 but predicted value is 1\n",
    "FP3 = np.sum((tz_test['click_yes'] == 0) & (tz_test['pred_rnd_binary2'] == 1))\n",
    "\n",
    "# False Negatives (FN): actual value is 1 but predicted value is 0\n",
    "FN3 = np.sum((tz_test['click_yes'] == 1) & (tz_test['pred_rnd_binary2'] == 0))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "957d2918",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>nr</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>TP</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>FP</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TN</td>\n",
       "      <td>27682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>FN</td>\n",
       "      <td>271</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  label     nr\n",
       "0    TP      0\n",
       "1    FP      0\n",
       "2    TN  27682\n",
       "3    FN    271"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm_rnd_recalc = pd.DataFrame(\n",
    "    {\n",
    "        \"label\": [\"TP\", \"FP\", \"TN\", \"FN\"],\n",
    "        \"nr\": [TP3, FP3, TN3, FN3]\n",
    "    }\n",
    ")\n",
    "\n",
    "cm_rnd_recalc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "90b40cb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9903051550817443"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_rnd_recalc = (TP3 + TN3) / (TP3 + FP3 + TN3 + FN3)# float\n",
    "accuracy_rnd_recalc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd84db53",
   "metadata": {},
   "source": [
    "#### 1 Both model didn't predict any True Positve and False Positive, which means both model didn't predict any click --> This could mean that, with the 0.5 cutoff, the threshold for classifying a positive instance is too high, and as a result, all instances are predicted as negative\n",
    "\n",
    "#### 2. Since both models produced the same outcomes at this cutoff, we can't distinguish between them based on the confusion matrix metrics alone."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a46c89b",
   "metadata": {},
   "source": [
    "## Part VI: Model comparison (12 points)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23c7b960",
   "metadata": {},
   "source": [
    "Use the following cost information to assess the profitability each of these models for targeting purposes during the upcoming advertising campaign where TZ will purchase 20-million impressions from Vneta:\n",
    "\n",
    "* Cost per 1,000 video impressions (CPM) is $10\n",
    "* Conversion to sign-up as a TZ game player after clicking on an ad is 5%\n",
    "* The expected CLV of customers that sign-up with TZ after clicking on an ad is approximately $25\n",
    "* The total cost of the data from Vneta is $50K\n",
    "* The total cost charged for the data science consulting services by Vneta is $150K\n",
    "\n",
    "Use `pred_logit`, `pred_rnd`, and the predictions from Vneta based on their proprietary model `pred_vneta` to compare model performance.\n",
    "\n",
    "> Note: The currently available data (+ the `pred_vneta` prediction) are free as part of the partnership between Vneta and TZ-gaming"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84482c7d",
   "metadata": {},
   "source": [
    "a. Create a new variable `target_logit` that is `True` if the predicted click-through (`pred_logit`) probability is greater than the break-even response rate and `FALSE` otherwise (1 point)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e36f22b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "tz_gaming[\"target_logit\"] = tz_gaming[\"pred_logit\"] > break_even"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01009762",
   "metadata": {},
   "source": [
    "b. Create a new variable `target_rnd` that is `True` if the predicted click-through (`pred_rnd`) probability is greater than the break-even response rate and `FALSE` otherwise (1 point)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a7db4220",
   "metadata": {},
   "outputs": [],
   "source": [
    "tz_gaming[\"target_rnd\"] = tz_gaming[\"pred_rnd\"] > break_even"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d37d412",
   "metadata": {},
   "source": [
    "c. Create a new variable `target_vneta` that is `True` if the predicted click-through (`pred_vneta`) probability is greater than the break-even response rate and `False` otherwise (1 point)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "17488a5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# insert your answer here\n",
    "tz_gaming[\"target_vneta\"] = tz_gaming['pred_vneta'] > break_even"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a114bda",
   "metadata": {},
   "source": [
    "d. Based only on the test set (i.e, `training == \"test\"`), calculate the expected profit (in dollars) and the expected return on marketing expenditures (ROME) if TZ (1) `spams` everyone in the test set, (2) continues to target using their current approach (`pred_rnd`), (3) purchases the data from Vneta and uses the logistic regression from I (`pred_logit`) for targeting, or (4) used Vneta's data science consulting services (`pred_vneta`) (3 points)\n",
    "\n",
    "> Note: For efficiency, you can adapt the `perf_calc_actual` function you created for the Tuango case to do the relevant performance calculations for the different models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "fa18ca55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "271"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate and add profit and ROME values for each approach\n",
    "# to the mod_perf data frame\n",
    "tz_gaming[\"pred_spam\"] = 1\n",
    "tz_gaming[\"target_spam\"] = True\n",
    "\n",
    "tz_test2 = tz_gaming[tz_gaming['training'] == 'test']\n",
    "tz_test2.head()\n",
    "\n",
    "nr_logit_message = len(tz_test2[tz_test2['target_logit'] == True])\n",
    "nr_rnd_message = len(tz_test2[tz_test2['target_rnd'] == True])\n",
    "nr_vneta_message = len(tz_test2[tz_test2['target_vneta'] == True])\n",
    "nr_spam_message = len(tz_test2[tz_test2['target_spam'] == True])\n",
    "\n",
    "nr_logit_message, nr_rnd_message, nr_vneta_message, nr_spam_message# \n",
    "\n",
    "len(tz_test2[tz_test2['click'] == 'yes'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2acabf16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>profit</th>\n",
       "      <th>ROME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>logit</td>\n",
       "      <td>167.43</td>\n",
       "      <td>1.538596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>rnd</td>\n",
       "      <td>59.98</td>\n",
       "      <td>0.215159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vneta</td>\n",
       "      <td>151.29</td>\n",
       "      <td>3.105933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>spam</td>\n",
       "      <td>59.22</td>\n",
       "      <td>0.211856</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   model  profit      ROME\n",
       "0  logit  167.43  1.538596\n",
       "1    rnd   59.98  0.215159\n",
       "2  vneta  151.29  3.105933\n",
       "3   spam   59.22  0.211856"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_logit = nr_logit_message * cost\n",
    "cost_rnd = nr_rnd_message * cost\n",
    "cost_vneta = nr_vneta_message * cost\n",
    "cost_spam_all = nr_spam_message * cost\n",
    "\n",
    "#nr_responses = len(tz_test2[tz_test2['click_yes'] == 1])\n",
    "\n",
    "response_rate_logit = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_logit'] == True)])/ nr_logit_message\n",
    "response_rate_rnd = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_rnd'] == True)]) / nr_rnd_message\n",
    "response_rate_vneta = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_vneta'] == True)]) / nr_vneta_message\n",
    "response_rate_spam = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_spam'] == True)]) / nr_spam_message\n",
    "\n",
    "\n",
    "nr_response_logit = response_rate_logit * nr_logit_message\n",
    "nr_response_rnd = response_rate_rnd * nr_rnd_message\n",
    "nr_response_vneta = response_rate_vneta * nr_vneta_message\n",
    "nr_response_spam = response_rate_spam * nr_spam_message\n",
    "\n",
    "rev_logit = nr_response_logit * clv * 0.05\n",
    "rev_rnd = nr_response_rnd * clv * 0.05\n",
    "rev_vneta = nr_response_vneta * clv * 0.05\n",
    "rev_spam = nr_response_spam * clv * 0.05\n",
    "\n",
    "profit_logit = rev_logit - cost_logit\n",
    "profit_rnd = rev_rnd - cost_rnd\n",
    "profit_vneta = rev_vneta - cost_vneta\n",
    "profit_spam = rev_spam - cost_spam_all\n",
    "\n",
    "ROME_logit = profit_logit / cost_logit\n",
    "ROME_rnd = profit_rnd / cost_rnd\n",
    "ROME_vneta = profit_vneta / cost_vneta\n",
    "ROME_spam = profit_spam / cost_spam_all\n",
    "\n",
    "\n",
    "mod_perf = pd.DataFrame(\n",
    "    {\n",
    "        \"model\": [\n",
    "            \"logit\", #predict logit , and you spam them, how they gonna react? response rate? calculate profit and ROME\n",
    "            \"rnd\",\n",
    "            \"vneta\",\n",
    "            \"spam\",\n",
    "        ],\n",
    "        \"profit\": [profit_logit, profit_rnd, profit_vneta, profit_spam],\n",
    "        \"ROME\": [ROME_logit, ROME_rnd, ROME_vneta, ROME_spam]\n",
    "    }\n",
    ")\n",
    "\n",
    "mod_perf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "3d95d688",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10882,\n",
       " 108.82000000000001,\n",
       " 0.02030876677081419,\n",
       " 221.0,\n",
       " 276.25,\n",
       " 167.43,\n",
       " 1.5385958463517735)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nr_logit_message, cost_logit, response_rate_logit, nr_response_logit, rev_logit, profit_logit, ROME_logit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d40387",
   "metadata": {},
   "source": [
    "e. Based on the results from VI.d discuss which of these 4 approaches you would recommend and why (2 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85be432d",
   "metadata": {},
   "source": [
    "#### 1. highest profit: logit model\n",
    "\n",
    "#### 2. highest ROME: Vneta model\n",
    "\n",
    "#### 3. If the objective is to maximize immediate profit regardless of the marketing spend, the logit model is the best choice due to its highest profit figure.\n",
    "\n",
    "#### 4. However, if the objective is to achieve the highest return on marketing investment, the vneta model is recommended. It offers the highest ROME, indicating it is the most efficient at converting marketing spend into profit, even if the total profit is slightly less than that of the logit model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68cd674e",
   "metadata": {},
   "source": [
    "f. Calculate the profit and ROME implications for each of the 4 options mentioned in VI.d if TZ purchases 20-million impression for the upcoming ad campaign (2 points)\n",
    "\n",
    "> Note: Calculate total profits under the assumption that options (3) and (4) are free of charge. Then compare the profit numbers to determine if these options would be worth the expense going forward.\n",
    "\n",
    "> Note: For efficiency, you can adapt the `perf_calc` function you created for the Tuango case to do the relevant performance calculations for the different models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "aa4e3ce7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>profit</th>\n",
       "      <th>ROME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>logit</td>\n",
       "      <td>119793.939828</td>\n",
       "      <td>1.538596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>rnd</td>\n",
       "      <td>42914.892856</td>\n",
       "      <td>0.215159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>vneta</td>\n",
       "      <td>108245.984331</td>\n",
       "      <td>3.105933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>spam</td>\n",
       "      <td>42371.122956</td>\n",
       "      <td>0.211856</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   model         profit      ROME\n",
       "0  logit  119793.939828  1.538596\n",
       "1    rnd   42914.892856  0.215159\n",
       "2  vneta  108245.984331  3.105933\n",
       "3   spam   42371.122956  0.211856"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## version 2:\n",
    "\n",
    "nr_message = 20000000 #20M\n",
    "\n",
    "target_rate_logit = len(tz_test2[tz_test2['target_logit'] == True]) / len(tz_test2)\n",
    "target_rate_rnd = len(tz_test2[tz_test2['target_rnd'] == True]) / len(tz_test2)\n",
    "target_rate_vneta = len(tz_test2[tz_test2['target_vneta'] == True]) / len(tz_test2)\n",
    "target_rate_spam = len(tz_test2[tz_test2['target_spam'] == True]) / len(tz_test2)\n",
    "\n",
    "nr_logit_message3 = nr_message * target_rate_logit\n",
    "nr_rnd_message3 = nr_message * target_rate_rnd\n",
    "nr_vneta_message3 = nr_message * target_rate_vneta\n",
    "nr_spam_message3 = nr_message * target_rate_spam\n",
    "\n",
    "cost_logit2 = nr_logit_message3 * cost\n",
    "cost_rnd2 = nr_rnd_message3 * cost\n",
    "cost_vneta2 = nr_vneta_message3 * cost\n",
    "cost_spam_all2 = nr_spam_message3 * cost\n",
    "\n",
    "#nr_responses = len(tz_test2[tz_test2['click_yes'] == 1])\n",
    "\n",
    "response_rate_logit2 = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_logit'] == True)])/ nr_logit_message\n",
    "response_rate_rnd2 = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_rnd'] == True)]) / nr_rnd_message\n",
    "response_rate_vneta2 = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_vneta'] == True)]) / nr_vneta_message\n",
    "response_rate_spam2 = len(tz_test2[(tz_test2['click_yes'] == 1) & (tz_test2['target_spam'] == True)]) / nr_spam_message\n",
    "\n",
    "\n",
    "nr_response_logit2 = response_rate_logit2 * nr_logit_message3\n",
    "nr_response_rnd2 = response_rate_rnd2 * nr_rnd_message3\n",
    "nr_response_vneta2 = response_rate_vneta2 * nr_vneta_message3\n",
    "nr_response_spam2 = response_rate_spam2 * nr_spam_message3\n",
    "\n",
    "rev_logit2 = nr_response_logit2 * clv * 0.05\n",
    "rev_rnd2 = nr_response_rnd2 * clv * 0.05\n",
    "rev_vneta2 = nr_response_vneta2 * clv * 0.05\n",
    "rev_spam2 = nr_response_spam2 * clv * 0.05\n",
    "\n",
    "profit_logit2 = rev_logit2 - cost_logit2\n",
    "profit_rnd2 = rev_rnd2 - cost_rnd2\n",
    "profit_vneta2 = rev_vneta2 - cost_vneta2\n",
    "profit_spam2 = rev_spam2 - cost_spam_all2\n",
    "\n",
    "ROME_logit2 = profit_logit2 / cost_logit2\n",
    "ROME_rnd2 = profit_rnd2 / cost_rnd2\n",
    "ROME_vneta2 = profit_vneta2 / cost_vneta2\n",
    "ROME_spam2 = profit_spam2 / cost_spam_all2\n",
    "\n",
    "\n",
    "mod_perf_20M = pd.DataFrame(\n",
    "    {\n",
    "        \"model\": [\n",
    "            \"logit\", \n",
    "            \"rnd\",\n",
    "            \"vneta\",\n",
    "            \"spam\",\n",
    "        ],\n",
    "        \"profit\": [profit_logit2, profit_rnd2, profit_vneta2, profit_spam2],\n",
    "        \"ROME\": [ROME_logit2, ROME_rnd2, ROME_vneta2, ROME_spam2]\n",
    "    }\n",
    ")\n",
    "\n",
    "mod_perf_20M"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1acd3c5",
   "metadata": {},
   "source": [
    "g. Based on the results from VI.f, discuss which of the 4 approaches you would recommend to put into production and why. Is your recommendation different from VI.e? Why (not) (2 points)\n",
    "\n",
    "> Note: Calculate total profits under the assumption that options (3) and (4) are free of charge. Then compare the profit numbers to determine if these options would be worth the expense going forward.\n",
    "\n",
    "> Note: For efficiency, consider adapting the `perf_calc` function you created for the Tuango case to do the relevant performance calculations for the different models."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a73b0370",
   "metadata": {},
   "source": [
    "#### 1. highest profit: Vneta model\n",
    "\n",
    "#### 2. highest ROME: Vneta model\n",
    "\n",
    "#### Both the profit and ROME figures for the Vneta model are the highest, indicating that it is the best choice for the upcoming ad campaign. \n",
    "\n",
    "#### However, here, we ignore the cost of the data from Vneta and the cost charged for the data science consulting services by Vneta. If we consider the cost, we need to reconsider the model we choose."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f97b194",
   "metadata": {},
   "source": [
    "## Part VII: Generative AI (5 points)\n",
    "\n",
    "Please describe how you used Generative AI-tools like ChatGPT to support your work on this assignment. Provide pdfs and/or screenshots of your \"discussions\" with these tools and comment on what things did and did not go well. Also add any questions you may have about the assignment and the support you received from GenAI so we can discuss these topics in class.\n",
    "\n",
    "Note: No matter how you used Generative AI-tools, you will be expected to fully understand all elements of the assignment. You may be called on in class to walk us through your thought process and how different parts of your code work."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3900a378",
   "metadata": {},
   "source": [
    "#### SEE PDF FILE"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "cell_metadata_filter": "-all",
   "main_language": "python",
   "notebook_metadata_filter": "-all"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "vscode": {
   "interpreter": {
    "hash": "d4d1e4263499bec80672ea0156c357c1ee493ec2b1c70f0acce89fc37c4a6abe"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
